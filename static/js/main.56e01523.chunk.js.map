{"version":3,"sources":["Components/DeforestationForm.jsx","Components/ButtonNotif.jsx","Config/context.js","Containers/Sidebar.jsx","Components/ButtonClear.jsx","Components/ButtonFire.jsx","Components/DfrsCard.jsx","Components/ModalContent.jsx","Containers/MapApp.jsx","Components/Charts/TotalTitle.jsx","Components/Charts/DoughnoutCharts.jsx","Components/Charts/PeatCharts.jsx","Components/Charts/AreaCharts.jsx","Containers/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["formItemLayout","labelCol","xs","span","sm","wrapperCol","wrapperStyle","offset","DeforestationForm","props","useState","isTimeRangeDisable","setTimeRangeDisabled","isPeriodDisable","setPeriodDisabled","activeRadio","setActiveRadio","timesRange","name","onFinish","e","Group","onChange","target","value","Item","label","RangePicker","format","disabled","placeholder","map","el","i","start","end","Option","key","moment","type","htmlType","id","onClick","onClear","ButtonNotif","visible","setVisible","Fragment","className","count","shape","size","NotificationFilled","title","placement","closable","onClose","width","ContextType","React","createContext","Provider","Consumer","ContextProvider","state","activePage","f_setActivePage","setState","this","children","Component","Sidebar","Menu","SubMenu","context","useContext","collapsed","Sider","theme","defaultSelectedKeys","mode","icon","FileOutlined","PieChartOutlined","ButtonClear","ClearOutlined","ButtonFire","danger","FireFilled","DfrsCard","headStyle","impacted","backgroundColor","index","extra","zoomTo","layout","lat","lon","Date","startdate","enddate","peatland","mangrove","other","total","doc","jsPDF","orientation","columnsPom","dataIndex","sorter","a","b","localeCompare","sortDirections","distance","render","status","color","columnsConc","columnsPeat","columnHotspot","ModalContent","generatePdf","headPom","dataPom","pomData","company","group","kabupaten","province","capacity","text","autoTable","head","body","headConc","dataConc","concData","totalArea","totalImpacted","headPeat","dataPeat","peatData","remark","area","headHs","dataHs","hotspotData","latitude","longitude","acq_date","verification","save","processingData","loadModules","then","geometryEngine","projection","SpatialReference","data","arrayPom","arrayConc","arrayPeat","arrayHotspot","console","log","dfrsLoc","location","endLoc","geometry","jarak","getDistance","no","attributes","PomName","distanceNumber","GroupName","Kabupaten","PROPNAME","Tankcap","CompanyNam","sort","dataHotspot","Loc_Date","Latitude","Longitude","Verificati","load","outSpatialReference","wkid","g1","project","dfrsArea","g2","j","isIntersect","intersects","intersectArea","intersect","geodesicArea","toTitleCase","Name","toFixed","Province","Total_Ha","isNaN","parseFloat","Category","Promise","all","konsesi","peat","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","style","height","overflow","paddingLeft","paddingRight","dataSource","columns","_","require","WsEndPoint","MapApp","f_showDrawer","showed","isDrawerShow","f_dfrsFormOnFinish","datamoment","whereCond","timeSelection","startDate","endDate","split","f_getDatesRange","query","layerDeforestationPoint","createQuery","where","queryFeatures","response","dfrsResult","features","definitionExpression","f_zoomTo","view","center","zoom","f_fetchTimeDfrs","fetch","json","timedata","f_clearBufferLayers","bufferLayer","removeAll","f_onClear","f_hotspot","mapRef","createRef","showModal","modalData","isLoading","dfrsPointGeom","dfrsAreaGeom","dark","light","nextStartDate","arr","add","push","reverse","css","ArcGISMap","MapView","VectorTileLayer","BasemapGallery","Expand","LayerList","FeatureLayer","GroupLayer","Graphic","GraphicsLayer","Legend","watchUtils","Query","TimeSlider","Zoom","DescriptionTable","isTrace","setTrace","detailDescription","Object","keys","f_traceData","layername","url","layerPom","layerRefinery","resultData","lineSymbol","spiderLine","paths","X_Coor","Y_Coor","spiderLineGraphic","symbol","graphics","catch","error","f_clearGraphic","fontSize","bordered","column","pomid","position","rfid","f_button","DfrsPopupContent","layerPlantationArea","r","inputValue","setInputValue","pomInside","setPomInside","concInside","setConcInside","layerOptions","layerPeat","updateLayerVisibility","checked","checkFeatureInside","onSliderChange","forEach","layer","filterFeatureInside","result","layerDeforestationArea","dfFeatures","feature","f","calculateArea","concessionResult","geom1","geom2","geom","undefined","getItemAt","filter","spatialRelationship","returnGeometry","zoomToFeature","goTo","tilt","createList","concessionColumn","mapingField","length","tableData","action","padding","start_date","end_date","defaultValue","max","tooltipPlacement","min","margin","opt","bottom","outFields","query2","queryHotspot","layerHotspot","featureSet","generateContent","popupDiv","document","createElement","pomPopupTemplate","content","ReactDOM","graphic","dpPopupTemplate","bufferSize","pointGeometry","bufferGeometry","geodesicBuffer","outline","updateBufferGraphic","basemap","container","current","popup","dockEnabled","dockOptions","buttonEnabled","breakpoint","layerPlantationPoint","popupEnabled","sketchLayer","listMode","addMany","glIndustries","glDeforestation","glLandIssue","zoomWidget","ui","components","basemapGallery","expand","expandTooltip","layerList","expandLayerList","legend","playRate","stops","interval","unit","popupTemplate","refineryPopupTemplate","whenTrue","dfrsContent","impactedId","obj","POINT_X","POINT_Y","includes","c","orderBy","d","dat","direction","ref","spinning","tip","display","flexDirection","justifyContent","onOk","onCancel","destroyOnClose","contextType","TotalTitle","data01","COLORS","Example","dataKey","isAnimationActive","cx","cy","outerRadius","fill","innerRadius","entry","PureComponent","jsfiddleUrl","AreaCharts","top","left","right","strokeDasharray","stroke","Dashboard","maxHeight","Content","Layout","App","minHeight","Boolean","window","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.56e01523.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form, Space, Select, Checkbox, Radio } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport { propTypes } from 'react-bootstrap/esm/Image';\r\nimport moment from 'moment'\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n}\r\n\r\nconst wrapperStyle = {\r\n  xs: {\r\n    span: 24,\r\n    offset: 0,\r\n  },\r\n  sm: {\r\n    span: 16,\r\n    offset: 8,\r\n  },\r\n}\r\n\r\nconst DeforestationForm = (props) => {\r\n  const [isTimeRangeDisable, setTimeRangeDisabled ] = useState(true)\r\n  const [isPeriodDisable, setPeriodDisabled ] = useState(true)\r\n  const [activeRadio, setActiveRadio] = useState('todate')\r\n\r\n  const onRadioChange = e => {\r\n    setActiveRadio(e.target.value)\r\n    if(e.target.value == \"period\"){\r\n      setPeriodDisabled(false)\r\n      setTimeRangeDisabled(true)\r\n    }\r\n    else if(e.target.value == \"range-picker\"){\r\n      setPeriodDisabled(true)\r\n      setTimeRangeDisabled(false)\r\n    }\r\n    else if(e.target.value == \"all\"){\r\n      setPeriodDisabled(true)\r\n      setTimeRangeDisabled(true)\r\n    }\r\n    else if(e.target.value == 'todate' ){\r\n      setPeriodDisabled(true)\r\n      setTimeRangeDisabled(true)\r\n    }\r\n  }\r\n\r\n  function getDatesRange(startdate, enddate){\r\n    let nextStartDate = startdate\r\n    let arr = []\r\n    while(nextStartDate <= enddate){\r\n      let start = nextStartDate.format()\r\n      let end = nextStartDate.add(13, 'days').format()\r\n      arr.push([ start, end ])\r\n      nextStartDate = nextStartDate.add(1, 'days')\r\n    }\r\n    return arr.reverse()\r\n  }\r\n\r\n  // let timesRange =  getDatesRange(moment(\"20190215\"), moment())\r\n  let timesRange = props.timesRange\r\n\r\n  return (\r\n    <Form name=\"deforestation_control\" {...formItemLayout} onFinish={ (e) => props.onFinish(e, activeRadio) } >\r\n      <Radio.Group onChange={ onRadioChange } value={activeRadio}>\r\n        <Radio value=\"todate\">To Date</Radio>\r\n        <Radio value=\"range-picker\">Time Range</Radio>\r\n        <Radio value=\"period\">Time Period</Radio>\r\n        <Radio value=\"all\">Select All</Radio>\r\n      </Radio.Group>\r\n      <Divider />\r\n      <Form.Item name=\"range-picker\" label=\"Time Range\">\r\n          <DatePicker.RangePicker format=\"YYYY/MM/DD\" disabled={isTimeRangeDisable} />\r\n      </Form.Item>\r\n      <Divider>Or</Divider>\r\n      <Form.Item name=\"period-time\" label=\"Period Time\">\r\n        <Select placeholder=\"select time period\" disabled={isPeriodDisable}>\r\n          {\r\n            timesRange.map( (el, i) => {\r\n              let [start, end] = el\r\n              return (<Select.Option key={i} value={ `${ moment(start).format(\"YYYY-MM-DD\") }|${ moment( end ).format(\"YYYY-MM-DD\") }`}>\r\n                { moment( start ).format(\"MMM Do YYYY\")} - { moment( end ).format(\"MMM Do YYYY\")}\r\n              </ Select.Option> )\r\n            })\r\n          }\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item wrapperCol={wrapperStyle} >\r\n        <Space>\r\n          <Button type=\"primary\" htmlType=\"submit\" id=\"button-form-deforestation\">Submit</Button>\r\n          <Button type=\"primary\" onClick={props.onClear} >Clear</Button>\r\n        </Space>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default DeforestationForm","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport DeforestationForm from './DeforestationForm'\r\n\r\nlet ButtonNotif = (props) => {\r\n  let [visible, setVisible] = useState(false)\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"button-notif\">\r\n        <Badge count={props.count}>\r\n          {/* <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={showDrawer} > */}\r\n          <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={props.onClick} >\r\n            <NotificationFilled />\r\n          </Button>\r\n        </Badge>\r\n      </div>\r\n      <Drawer\r\n        title=\"Deforestation\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={500}\r\n      >\r\n        {/* <DeforestationForm onFinish={(data) => console.log(\"halo\", data)} /> */}\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ButtonNotif","import React from 'react'\r\n\r\nlet ContextType = React.createContext()\r\nconst {Provider, Consumer} = ContextType\r\n\r\nclass ContextProvider extends React.Component{\r\n  state = {\r\n    activePage : 'map'\r\n  }\r\n\r\n  f_setActivePage = (value) => {\r\n    this.setState({ activePage : value})\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Provider value = {{\r\n        ...this.state,\r\n        f_setActivePage : this.f_setActivePage\r\n      }}>\r\n        {this.props.children}\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport{ ContextProvider, Consumer, ContextType}\r\n","import React, { useState, useContext } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport {ContextType} from '../Config/context'\r\nimport {\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n} from '@ant-design/icons';\r\nconst { SubMenu } = Menu;\r\n\r\nlet Sidebar = (props) => {\r\n  let context = useContext(ContextType)\r\n  const [collapsed, setCollapsed] = useState(true)\r\n\r\n  const f_handleChange = function(e){\r\n    context.f_setActivePage(e.key)\r\n  }\r\n\r\n  return (\r\n    <Layout.Sider collapsed={collapsed}>\r\n      <div className=\"logo\">\r\n      </div>\r\n      <Menu theme=\"dark\" onClick={f_handleChange} defaultSelectedKeys={[context.activePage]} mode=\"inline\">\r\n        <Menu.Item key=\"dashboard\" icon={<FileOutlined />} />\r\n        <Menu.Item key=\"map\" icon={<PieChartOutlined />}>\r\n          Maps\r\n        </Menu.Item>\r\n      </Menu>\r\n    </ Layout.Sider>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form } from 'antd'\r\nimport { ClearOutlined } from '@ant-design/icons'\r\nimport DeforestationForm from './DeforestationForm'\r\n\r\nconst ButtonClear = (props) => {\r\n  let [visible, setVisible] = useState(false)\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"button-clear\">\r\n        <Badge count={props.count}>\r\n          {/* <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"ButtonClear\" onClick={showDrawer} > */}\r\n          <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonClear\" onClick={props.onClick} >\r\n            <ClearOutlined />\r\n          </Button>\r\n        </Badge>\r\n      </div>\r\n      <Drawer\r\n        title=\"Deforestation\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={500}\r\n      >\r\n        {/* <DeforestationForm onFinish={(data) => console.log(\"halo\", data)} /> */}\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ButtonClear","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport { FireFilled } from '@ant-design/icons'\r\n\r\nconst ButtonFire = (props) => {\r\n  return (\r\n    <div className={props.className}>\r\n        <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonClear\" onClick={props.onClick} danger={true}>\r\n          <FireFilled />\r\n        </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ButtonFire","import React from 'react'\r\nimport { Card, Descriptions, Button } from 'antd'\r\nimport moment from 'moment'\r\n\r\nconst DfrsCard = props => {\r\n  let redHead = {backgroundColor : 'red'}\r\n  let headStyle = props.impacted ? redHead : null\r\n  return (\r\n    <Card type=\"inner\" title={`Deforestation ${props.index}`} headStyle={headStyle}  extra={<Button type=\"dashed\" onClick={props.zoomTo} >Zoom to</Button>}>\r\n      <Descriptions size=\"small\" layout=\"vertical\" >\r\n        <Descriptions.Item label=\"Latitude\">{props.lat}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Longitude\">{props.lon}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Start Date\">{ moment(new Date(props.startdate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"End Date\">{ moment( new Date(props.enddate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Peatland\">{props.peatland} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Mangrove\">{props.mangrove} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Other\">{props.other} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Total\">{props.total} ha</Descriptions.Item>\r\n        {/* <Descriptions.Item label=\"id\">{props.id} ha</Descriptions.Item> */}\r\n      </Descriptions>\r\n    </Card>\r\n  )\r\n}\r\nexport default DfrsCard","import React, { useEffect, useState } from 'react'\r\nimport { Table, Divider, Tag, Button } from 'antd'\r\nimport { getDistance } from 'geolib'\r\nimport { loadModules } from 'esri-loader'\r\nimport $ from 'jquery'\r\nimport jsPDF from 'jspdf'\r\nimport 'jspdf-autotable'\r\n// import autoTable from 'jspdf-autotable'\r\n\r\nconst doc = new jsPDF({\r\n  orientation: \"landscape\"\r\n})\r\n\r\nconst columnsPom = [\r\n  {\r\n    title: 'Pom Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    span: 10,\r\n    sorter: (a, b) => a.name.localeCompare(b.name),\r\n    sortDirections: ['ascend']\r\n  },\r\n  {\r\n    title: 'Company',\r\n    dataIndex: 'company',\r\n    key: 'company',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Group',\r\n    dataIndex: 'group',\r\n    key: 'group',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'District',\r\n    dataIndex: 'kabupaten',\r\n    key: 'kabupaten',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Province',\r\n    dataIndex: 'province',\r\n    key: 'province',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Capacity',\r\n    dataIndex: 'capacity',\r\n    key: 'capacity',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Distance (estimation) in Km',\r\n    dataIndex: 'distance',\r\n    key: 'distance',\r\n    span: 10,\r\n    sorter: (a, b) => a.distance - b.distance\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    span: 10,\r\n    render: status => {\r\n      let color = status == \"warning\" ? 'yellow' : 'red'\r\n      return (\r\n        <Tag color={color} key={status}>\r\n          {status}\r\n        </Tag>\r\n      )\r\n    }\r\n  },\r\n];\r\nconst columnsConc = [\r\n  {\r\n    title: 'Concession',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Group',\r\n    dataIndex: 'group',\r\n    key: 'groupe',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Province',\r\n    dataIndex: 'province',\r\n    key: 'provincee',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Total Area',\r\n    dataIndex: 'totalArea',\r\n    key: 'totalArea',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Impacted',\r\n    dataIndex: 'totalImpacted',\r\n    key: 'totalImpacted',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Distance in Km (Estimation)',\r\n    dataIndex: 'distance',\r\n    key: 'distance',\r\n    span : 10,\r\n    sorter: (a, b) => a.distance - b.distance,\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    span: 10,\r\n    render: status => {\r\n      let color = status == \"warning\" ? 'yellow' : 'red'\r\n      return (\r\n        <Tag color={color} key={status}>\r\n          {status}\r\n        </Tag>\r\n      )\r\n    }\r\n  },\r\n];\r\nconst columnsPeat = [\r\n  {\r\n    title : 'Remarks',\r\n    dataIndex : 'remark',\r\n    key : 'remark',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Distance in Km (Estimation)',\r\n    dataIndex: 'distance',\r\n    key: 'distance',\r\n    span : 10,\r\n    sorter: (a, b) => a.distance - b.distance,\r\n  },\r\n  {\r\n    title : 'Total Area',\r\n    dataIndex : 'area',\r\n    key : 'area',\r\n    span : 10\r\n  },\r\n  // {\r\n  //   title: \"Action\",\r\n  //   dataIndex: 'action',\r\n  //   key: 'action',\r\n  //   span: 10\r\n  // }\r\n]\r\nconst columnHotspot = [\r\n  {\r\n    title : 'Latitude',\r\n    dataIndex : 'latitude',\r\n    key : 'latitude',\r\n    span : 10\r\n  },\r\n  {\r\n    title : 'Longitude',\r\n    dataIndex : 'longitude',\r\n    key : 'longitude',\r\n    span : 10\r\n  },\r\n  {\r\n    title : 'Acquisition Date',\r\n    dataIndex : 'acq_date',\r\n    key : 'acq_date',\r\n    span : 10\r\n  },\r\n  {\r\n    title : 'Verification',\r\n    dataIndex : 'verification',\r\n    key : 'verification',\r\n    span : 10\r\n  },\r\n]\r\n\r\n\r\nclass ModalContent extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      pomData : [],\r\n      concData : [],\r\n      peatData : [],\r\n      hotspotData : []\r\n    }\r\n  }\r\n\r\n  toTitleCase(str) {\r\n    return str.replace(\r\n      /\\w\\S*/g,\r\n      function(txt) {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n      }\r\n    );\r\n  }\r\n\r\n  generatePdf = () => {\r\n\r\n    let headPom = columnsPom.map(el => el.title)\r\n    let dataPom = this.state.pomData.map(\r\n      el => {\r\n        return [el.name, el.company, el.group, el.kabupaten, el.province, el.capacity, el.distance, el.status]\r\n      }\r\n    )\r\n    doc.text(\"Third Party Supplier\", 10, 10)\r\n    doc.autoTable({\r\n      head : [headPom],\r\n      body : dataPom\r\n    })\r\n\r\n    let headConc = columnsConc.map(el => el.title)\r\n    let dataConc = this.state.concData.map(\r\n      el => {\r\n        return [el.name, el.group, el.province, el.totalArea,el.totalImpacted, el.distance, el.status]\r\n      }\r\n    )\r\n    doc.text(\"Plantation\", 10, 10)\r\n    doc.autoTable({\r\n      head : [headConc],\r\n      body : dataConc\r\n    })\r\n\r\n    let headPeat = columnsPeat.map(el => el.title )\r\n    let dataPeat = this.state.peatData.map(\r\n      el => {\r\n        return [ el.remark, el.distance, el.area ]\r\n      }\r\n    )\r\n    doc.autoTable({\r\n      head : [headPeat],\r\n      body : dataPeat\r\n    })\r\n\r\n    let headHs = columnHotspot.map(el => el.title)\r\n    let dataHs = this.state.hotspotData.map(\r\n      el => {\r\n        return [el.latitude, el.longitude, el.acq_date, el.verification]\r\n      }\r\n    )\r\n    doc.autoTable({\r\n      head : [headHs],\r\n      body : dataHs\r\n    })\r\n\r\n    doc.save('table.pdf')\r\n  }\r\n\r\n  processingData = () => {\r\n    loadModules([\r\n      \"esri/geometry/geometryEngine\",\r\n      \"esri/geometry/projection\",\r\n      \"esri/geometry/SpatialReference\"\r\n    ]).then(([geometryEngine, projection, SpatialReference]) => {\r\n      let props = this.props\r\n      const [arrayPom, arrayConc, arrayPeat, arrayHotspot] = props.data\r\n      console.log(\"modalcontent\", props.data)\r\n      const dfrsLoc = { latitude: props.location.latitude, longitude: props.location.longitude }\r\n      // console.log(\"hs\", arrayHotspot)\r\n      // console.log(arr)\r\n      // destructuring data POM dan loop, sehingga didapatkan jarak ke titik deforestasi\r\n      let dataPom = arrayPom.map((el, i) => {\r\n        let endLoc = { latitude: el.geometry.latitude, longitude: el.geometry.longitude }\r\n        let jarak = getDistance(dfrsLoc, endLoc)\r\n        let status = jarak > 1000 ? 'warning' : 'impacted'\r\n        return {\r\n          key: i,\r\n          no: i + 1,\r\n          name: el.attributes.PomName,\r\n          distance: jarak / 1000,\r\n          distanceNumber: jarak,\r\n          status: status,\r\n          group : el.attributes.GroupName,\r\n          kabupaten : el.attributes.Kabupaten,\r\n          province : el.attributes.PROPNAME,\r\n          capacity : el.attributes.Tankcap,\r\n          company : el.attributes.CompanyNam\r\n        }\r\n      })\r\n      // sort ascending\r\n      dataPom.sort((a, b) => a.distanceNumber - b.distanceNumber)\r\n      // console.log(\"datapom\", dataPom)\r\n\r\n      let dataHotspot = arrayHotspot.map( (el,i) => {\r\n        return{\r\n          key : i,\r\n          acq_date : el.attributes.Loc_Date,\r\n          latitude : el.attributes.Latitude,\r\n          longitude : el.attributes.Longitude,\r\n          verification : el.attributes.Verificati\r\n        }\r\n      })\r\n      console.log(\"dataHotspot\", dataHotspot)\r\n\r\n      // Destructuring data konsesi, karena datanya berupa area dan projeksinya berbeda, perlu load module projection dari Arcmap\r\n      // dan akan mereturn promise\r\n      let dataConc = arrayConc.map((el, i) => {\r\n        return projection.load().then(\r\n          () => {\r\n            let area\r\n            let outSpatialReference = new SpatialReference({\r\n              wkid: 3857 //Sphere_Sinusoidal projection\r\n            });\r\n            let g1 = projection.project(props.dfrsArea, outSpatialReference)\r\n            let g2 = projection.project(el.geometry, outSpatialReference)\r\n            let j = geometryEngine.distance(g1, g2)\r\n            let status = j < 10 ? 'impacted' : 'warning'\r\n\r\n            let isIntersect = geometryEngine.intersects(g1, g2)\r\n            console.log(\"intersect\", isIntersect)\r\n            if(isIntersect){\r\n              let intersectArea = geometryEngine.intersect(g1,g2)\r\n              area = geometryEngine.geodesicArea(intersectArea, \"hectares\")\r\n            }\r\n            else{\r\n              area = ''\r\n            }\r\n\r\n            let result = {\r\n              key: i,\r\n              no: i + 1,\r\n              name: this.toTitleCase( el.attributes.Name ),\r\n              // area: 10,\r\n              distance: (j / 1000).toFixed(2),\r\n              status: status,\r\n              group : el.attributes.GroupName,\r\n              province : el.attributes.Province,\r\n              totalArea : el.attributes.Total_Ha,\r\n              totalImpacted : isNaN(area)? '' : parseFloat(area).toFixed(3)\r\n            }\r\n            return result\r\n          }\r\n        )\r\n      })\r\n\r\n      // Destructuring data Peat\r\n      let dataPeat = arrayPeat.map( (el, i) => {\r\n        console.log(\"el\", el)\r\n        return projection.load().then(\r\n          () => {\r\n            let outSpatialReference = new SpatialReference({\r\n              wkid: 3857 //Sphere_Sinusoidal projection\r\n            });\r\n            let g1 = projection.project(props.dfrsArea, outSpatialReference)\r\n            let g2 = projection.project(el.geometry, outSpatialReference)\r\n            let j = geometryEngine.distance(g1, g2)\r\n            let status = j < 1000 ? 'impacted' : 'warning'\r\n            return {\r\n              remark : el.attributes.Category,\r\n              area : el.attributes[\"SHAPE.STArea()\"],\r\n              key : i,\r\n              status : status,\r\n              distance: (j / 1000).toFixed(2),\r\n            }\r\n          }\r\n        )\r\n      })\r\n\r\n      // Karena data konsesi yang bersinggunan mereturn promise, makan perlu di promise all array tersebut, setekah promise sukses kemudian ubah state agar tampilan data berubah\r\n      Promise.all(dataConc).then(\r\n        // konsesi => setConcData(konsesi)\r\n        konsesi => this.setState({\r\n          concData : konsesi\r\n        })\r\n      )\r\n      Promise.all(dataPeat).then(\r\n        // peat => setPeatData(peat)\r\n        peat => this.setState({\r\n          peatData : peat\r\n        })\r\n      )\r\n      // setPomData(dataPom)\r\n      // setHotspotData(dataHotspot)\r\n\r\n      this.setState({\r\n        hotspotData : dataHotspot,\r\n        pomData : dataPom\r\n      })\r\n    })\r\n  \r\n  }\r\n\r\n  componentDidMount(){\r\n    this.processingData()\r\n  }\r\n\r\n  // componentDidUpdate(){\r\n  //   this.processingData()\r\n  // }\r\n\r\n  render(){\r\n    let { pomData, concData, peatData, hotspotData} = this.state\r\n    return(\r\n    <div style={{ height: '60vh', overflow: 'scroll', paddingLeft: '5vw', paddingRight: '5vw' }}>\r\n      <h2>Mill - Third Party Supplier</h2>\r\n      <Table id=\"pomTable\" dataSource={pomData} columns={columnsPom} />\r\n      <Divider />\r\n      <h2>Concession</h2>\r\n      <Table dataSource={concData} columns={columnsConc} />\r\n      <Divider />\r\n      <h2>Peat</h2>\r\n      <Table dataSource={peatData} columns={columnsPeat} />\r\n      <Divider />\r\n      <h2>Hotspot</h2>\r\n      <Table dataSource={hotspotData} columns={columnHotspot} />\r\n      <Divider />\r\n      <Button type=\"dashed\" onClick={this.generatePdf} >Export to PDF</Button>\r\n      <Divider />\r\n    </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default ModalContent","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ContextType} from '../Config/context'\r\nimport { loadModules } from 'esri-loader';\r\nimport { Button, Descriptions, Divider, Drawer, Slider, Checkbox, Space, Result, Empty, Modal, InputNumber, Row, Col, Spin, Table } from 'antd'\r\nimport ButtonNotif from '../Components/ButtonNotif';\r\nimport ButtonClear from '../Components/ButtonClear';\r\nimport ButtonFire from '../Components/ButtonFire'\r\nimport DeforestationForm from '../Components/DeforestationForm';\r\nimport DfrsCard from '../Components/DfrsCard'\r\nimport ModalContent from '../Components/ModalContent'\r\nimport moment from 'moment'\r\nimport PickerButton from 'antd/lib/date-picker/PickerButton';\r\nvar _ = require('lodash');\r\n\r\nconst WsEndPoint = \"http://10.7.12.21:8000/service/WGService.asmx/\"\r\n\r\nclass MapApp extends React.Component {\r\n  static contextType = ContextType\r\n\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.mapRef = React.createRef()\r\n    this.state = {\r\n      isDrawerShow : false,\r\n      dfrsResult : null,\r\n      timedata : [],\r\n      showModal : false,\r\n      modalData : [],\r\n      isLoading : false,\r\n      dfrsPointGeom : [],\r\n      dfrsAreaGeom : null,\r\n      timeSelection : []\r\n    }\r\n\r\n    this.theme = {\r\n      dark : \"https://js.arcgis.com/4.16/esri/themes/dark/main.css\",\r\n      light : true,\r\n    }\r\n\r\n    this.f_fetchTimeDfrs()\r\n  }\r\n\r\n  //=============================================================\r\n  // FUNCTION\r\n  //=============================================================\r\n  f_showDrawer = (showed) => {\r\n    this.setState({\r\n      isDrawerShow : showed\r\n    })\r\n  }\r\n\r\n  f_dfrsFormOnFinish = (datamoment, type) => {\r\n    let whereCond, timeSelection\r\n    if(type == \"range-picker\"){\r\n      let startDate = datamoment[\"range-picker\"][0].format(\"YYYY-MM-DD\")\r\n      let endDate = datamoment[\"range-picker\"][1].format(\"YYYY-MM-DD\")\r\n      // whereCond = `end_date >= '${startDate}' and end_date <= '${endDate}'`\r\n      whereCond = `start_date >= '${startDate}' and end_date <= '${endDate}'`\r\n      timeSelection = [startDate, endDate]\r\n    }\r\n    else if(type == \"period\"){\r\n      let [start, end ] = datamoment[\"period-time\"].split(\"|\")\r\n      whereCond = `end_date >= '${start}' and end_date <= '${end}'`\r\n      // whereCond = `start_date >= '${start}' and end_date <= '${end}'`\r\n      timeSelection = [start, end]\r\n    }\r\n    else if(type == \"all\"){\r\n      whereCond = ``\r\n      timeSelection = []\r\n    }\r\n    else if(type == \"todate\"){\r\n      let [start, end] = this.f_getDatesRange(moment(\"20190215\"), moment())[0]\r\n      // console.log(\"TimeRange\", todate )\r\n      whereCond = `end_date >= '${start}' and end_date <= '${end}'`\r\n      timeSelection = [start, end]\r\n    }\r\n    this.setState({ timeSelection : timeSelection })\r\n\r\n    // FILTER UNTUK CARD SELECTION\r\n    let query =  this.layerDeforestationPoint.createQuery()\r\n    query.where = whereCond\r\n    this.layerDeforestationPoint.queryFeatures(query).then(response => this.setState({ dfrsResult : response.features }) )\r\n\r\n    // FILTER DEFORESTASI DI LAYER\r\n    this.layerDeforestationPoint.definitionExpression = whereCond\r\n    this.layerDeforestationPoint.visible = true\r\n  }\r\n\r\n  f_zoomTo = (lat, lon) => {\r\n    console.log(lat, lon)\r\n    this.view.center = [lon, lat]\r\n    this.view.zoom = 13\r\n  }\r\n\r\n  f_fetchTimeDfrs = () => {\r\n    fetch(`https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/0/query?f=json&outFields=[start_date,end_date]&where=1=1&returnGeometry=false`)\r\n      .then(response => response.json() )\r\n      .then( data => this.setState({\r\n        timedata : data.features\r\n      }) )\r\n  }\r\n\r\n  f_clearBufferLayers = () => {\r\n    this.bufferLayer.removeAll()\r\n  }\r\n\r\n  f_getDatesRange(startdate, enddate){\r\n    let nextStartDate = startdate\r\n    let arr = []\r\n    while(nextStartDate <= enddate){\r\n      let start = nextStartDate.format()\r\n      let end = nextStartDate.add(13, 'days').format()\r\n      arr.push([ start, end ])\r\n      nextStartDate = nextStartDate.add(1, 'days')\r\n    }\r\n    return arr.reverse()\r\n  }\r\n\r\n  f_onClear = () => {\r\n    this.setState({ dfrsResult : null })\r\n    this.layerDeforestationPoint.visible = false\r\n  }\r\n\r\n  f_hotspot = () => {\r\n    \r\n  }\r\n  //\r\n  // LIFECYCLE\r\n  //\r\n  componentDidMount() {\r\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/layers/VectorTileLayer', 'esri/widgets/BasemapGallery', 'esri/widgets/Expand', \"esri/widgets/LayerList\", \"esri/layers/FeatureLayer\", \"esri/layers/GroupLayer\", \"esri/Graphic\", \"esri/layers/GraphicsLayer\", \"esri/widgets/Legend\", \"esri/geometry/geometryEngine\", \"esri/core/watchUtils\", \"esri/widgets/DistanceMeasurement2D\", \"esri/tasks/support/Query\", \"esri/widgets/TimeSlider\", \"esri/widgets/Zoom\", \"esri/geometry/projection\", \"esri/geometry/SpatialReference\"], { css: this.theme.light }).then(\r\n      ([ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query, TimeSlider, Zoom, projection, SpatialReference]) => {\r\n        //===============================================================\r\n        // LOCAL COMPONENT\r\n        //===============================================================\r\n        // Table deskripsi pada popup information\r\n        const DescriptionTable = (props) => {\r\n          let [isTrace, setTrace] = useState(false)\r\n\r\n          let data = props.data\r\n\r\n          let detailDescription = []\r\n          for (var key of Object.keys(data)) {\r\n            detailDescription.push(<Descriptions.Item label={key} key={key} >{data[key]}</Descriptions.Item>)\r\n          }\r\n\r\n          // Function to draw spider map from POM to refinery\r\n          let f_traceData = (id, layername, lon, lat) => {\r\n            let url\r\n            if (layername === \"Refinery\") {\r\n              url = `${WsEndPoint}_GetPOMSupplier_?refinery=${id}`\r\n              this.layerPom.visible = true\r\n            } else if (layername === \"POM\") {\r\n              url = `${WsEndPoint}_GetRefinery_?pom=${id}`\r\n              this.layerRefinery.visible = true\r\n            }\r\n\r\n            fetch(url)\r\n              .then(response => response.json())\r\n              .then(resultData => {\r\n                // DRAW LINE\r\n                let lineSymbol = {\r\n                  type: 'simple-line',\r\n                  color: [226, 119, 40],\r\n                  width: 2\r\n                }\r\n\r\n                resultData.map(el => {\r\n                  let spiderLine = {\r\n                    type: \"polyline\",\r\n                    paths: [\r\n                      // [props.position.longitude, props.position.latitude],\r\n                      [lon, lat],\r\n                      [parseFloat(el.X_Coor), parseFloat(el.Y_Coor)]\r\n                    ]\r\n                  }\r\n\r\n                  let spiderLineGraphic = new Graphic({\r\n                    geometry: spiderLine,\r\n                    symbol: lineSymbol\r\n                  })\r\n\r\n                  this.view.graphics.add(spiderLineGraphic)\r\n                })\r\n              })\r\n              .then(() => setTrace(true))\r\n              .catch(error => console.log('error', error));\r\n\r\n          }\r\n\r\n          let f_clearGraphic = () => {\r\n            this.view.graphics.removeAll()\r\n            this.layerRefinery.visible = false\r\n            setTrace(false)\r\n          }\r\n\r\n          let f_button = () => {\r\n            switch (props.title) {\r\n              case \"POM\":\r\n                return isTrace ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.pomid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n              case \"Refinery\":\r\n                return isTrace == true ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.rfid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n            }\r\n          }\r\n\r\n          return (\r\n            <React.Fragment>\r\n              <Descriptions title={props.title} style={{ fontSize: '12px' }} bordered column={1} size=\"small\">\r\n                {detailDescription}\r\n              </Descriptions>\r\n              <Divider />\r\n              {f_button()}\r\n            </React.Fragment>\r\n          )\r\n        }\r\n\r\n        // Konten saat Deforestation point di klik\r\n        const DfrsPopupContent = (props) => {\r\n          console.log(\"props\", props)\r\n          this.layerPlantationArea.queryFeatures().then(r => console.log(\"conc area\", r))\r\n          const [inputValue, setInputValue] = useState(0)\r\n          const [pomInside, setPomInside] = useState([])\r\n          const [concInside, setConcInside] = useState([])\r\n          const layerOptions = [\r\n            { label : 'POM', value : this.layerPom, key:\"1\"  },\r\n            { label : 'Reffinery', value : this.layerRefinery, key:\"2\" },\r\n            { label : 'Concession Area', value : this.layerPlantationArea, key:\"3\" },\r\n            { label : 'Peatland', value : this.layerPeat, key:\"4\" },\r\n          ]\r\n\r\n          // let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n\r\n          const updateLayerVisibility = e => {\r\n            e.target.value.visible = e.target.checked\r\n            checkFeatureInside()\r\n          }\r\n\r\n          const onChange = value => { \r\n            setInputValue(value)\r\n            props.onSliderChange(value) \r\n            checkFeatureInside()\r\n          }\r\n\r\n          const checkFeatureInside = () => {\r\n            layerOptions.forEach( (el, i) => {\r\n              let layer = el.value\r\n              //POM SUPPLIER\r\n              if(layer.title == \"POM Supplier\"){\r\n                if(layer.visible){\r\n                  filterFeatureInside(layer).then(\r\n                    result => setPomInside(result.features)\r\n                  )\r\n                }\r\n                else{\r\n                  setPomInside([])\r\n                }\r\n              }\r\n              //KONSESI\r\n              else if(layer.title == \"Oil Palm Area\"){\r\n                if(layer.visible){\r\n                  filterFeatureInside(layer).then(\r\n                    async result => {\r\n                      // CALCULATE AREA\r\n                      let query = this.layerDeforestationArea.createQuery()\r\n                      query.where = `id = '${props.id}'`\r\n                      let dfFeatures = await this.layerDeforestationArea.queryFeatures(query)\r\n                      var concessionResult = await result.features.map(\r\n                        async feature => {\r\n                          let f = feature\r\n                          let area = await calculateArea(feature.geometry, dfFeatures.features[0].geometry)\r\n                          f.area = area\r\n                          console.log(\"f\", f)\r\n                          return f\r\n                        }\r\n                      )\r\n\r\n                      Promise.all(concessionResult).then(\r\n                        value => setConcInside(value)\r\n                      )\r\n                    }\r\n                  )\r\n                }\r\n                else{\r\n                  setConcInside([])\r\n                }\r\n              }\r\n            })\r\n          }\r\n\r\n          const calculateArea = (geom1, geom2) => {\r\n            // console.log(\"g1g2\", geom1, geom2)\r\n            return projection.load().then(\r\n              () => {\r\n                let outSpatialReference = new SpatialReference({\r\n                  wkid: 3857 //Sphere_Sinusoidal projection\r\n                });\r\n                let g1 = projection.project(geom1, outSpatialReference)\r\n                let g2 = projection.project(geom2, outSpatialReference)\r\n                let isIntersect = geometryEngine.intersects(g1, g2)\r\n                if(isIntersect){\r\n                  let intersectArea = geometryEngine.intersect(g1,g2)\r\n                  var area = geometryEngine.geodesicArea(intersectArea, \"hectares\")\r\n                }\r\n                else{\r\n                  var area = ''\r\n                }\r\n                return area\r\n              }\r\n            )\r\n\r\n          }\r\n\r\n          const filterFeatureInside = layer => {\r\n            let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n            // console.log('l', layer)\r\n            let filter = new Query()\r\n            filter.geometry = geom\r\n            filter.spatialRelationship = \"intersects\"\r\n            filter.returnGeometry = true\r\n            // let result = await layer.queryFeatures(filter)\r\n            // return await result\r\n            return layer.queryFeatures(filter)\r\n          }\r\n\r\n          const buttonOnClick = () => {\r\n            let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n            if(geom){\r\n\r\n              // Query untuk mencari area yang berintersect dengan area buffer\r\n              const query = new Query()\r\n              query.geometry = geom\r\n              query.spatialRelationship = \"intersects\"\r\n              query.returnGeometry = true\r\n              query.outFields = \"*\"\r\n              query.outSpatialReference = { wkid: 4326 };\r\n\r\n              // Query unntuk menyeleksi area deforestasi berdasarkan ID point\r\n              const query2 = new Query\r\n              query2.outFields = \"*\"\r\n              query2.returnGeometry = true\r\n              query2.where = `id = '${props.id}'`\r\n\r\n              const queryHotspot = new Query\r\n              queryHotspot.outFields = \"*\"\r\n              queryHotspot.geometry = geom\r\n              queryHotspot.returnGeometry = true\r\n              queryHotspot.spatialRelationship = \"intersects\"\r\n              queryHotspot.where = `Acq_Date between date'${moment( props.attributes.start_date ).format(\"YYYY-MM-DD\")}' and '${ moment(props.attributes.end_date).format(\"YYYY-MM-DD\")}'`\r\n\r\n              // Setelah berhasil di query hasil akan dikirim ke modal, untuk dianalisis apakah di geometry tersebut terdapat POI yang terimpact\r\n              this.layerDeforestationArea.queryFeatures(query2).then(\r\n                result => { \r\n                  this.setState({\r\n                    dfrsAreaGeom : result.features[0].geometry\r\n                  })\r\n                }\r\n              )\r\n              \r\n              // Mengaktifkan loading spinner\r\n              this.setState({ isLoading : true })\r\n\r\n              // Mengeksekusi Query sebelum dikirim ke Modal data2 apa saja yang terindikasi bersinggungan dengan area buffer yaitu layer pom, area plantation dan peat\r\n              Promise.all([this.layerPom.queryFeatures(query), this.layerPlantationArea.queryFeatures(query), this.layerPeat.queryFeatures(query), this.layerHotspot.queryFeatures(queryHotspot) ])\r\n                .then(result => {\r\n                  let featureSet = result.map( featureSet => featureSet.features )\r\n                  console.log(\"fs\", featureSet)\r\n                  this.setState({ modalData : featureSet})\r\n                })\r\n                // Menonaktifkan spinner dan menampilkan modal\r\n                .then( () => this.setState({showModal : true, isLoading : false}) )\r\n\r\n            }\r\n          }\r\n\r\n          const zoomToFeature = (geom) => {\r\n            this.view.goTo({\r\n              target : geom,\r\n              tilt : 70\r\n            })\r\n          }\r\n\r\n          const createList = (data, title) => {\r\n            console.log(\"data\", data)\r\n\r\n            // COLUMN FOR POM\r\n            const columns = [\r\n              {\r\n                title: 'Name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: text => <a>{text}</a>,\r\n              },\r\n              {\r\n                title: 'Action',\r\n                dataIndex: 'action',\r\n                key: 'action',\r\n                render : geom => <Button onClick={() => zoomToFeature(geom) } >go to</Button>\r\n              },\r\n            ]\r\n\r\n            // COLUMN FOR CONCESSION\r\n            const concessionColumn =  [\r\n              {\r\n                title: 'Names',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: text => <a>{text}</a>,\r\n              },\r\n              {\r\n                title: 'Impacted Area',\r\n                dataIndex: 'area',\r\n                key: 'area',\r\n                render : area => isNaN(parseFloat(area).toFixed(3)) ? null : <span style={{color : 'red'}}>{parseFloat(area).toFixed(3)} Ha</span>\r\n              },\r\n              {\r\n                title: 'Action',\r\n                dataIndex: 'action',\r\n                key: 'action',\r\n                render : geom => <Button onClick={() => zoomToFeature(geom) } >go to</Button>\r\n              },\r\n            ]\r\n\r\n            const mapingField = {\r\n              \"POM\" : \"PomName\",\r\n              \"Concession\" : \"Name\",\r\n            }\r\n\r\n            function chooseColumn(){\r\n              if(title==\"POM\"){ return columns}\r\n              else if(title == \"Concession\"){ return concessionColumn}\r\n            }\r\n\r\n            if(data.length > 0){\r\n              console.log(data)\r\n              let tableData = data.map(el => { return { name : el.attributes[ mapingField[title] ], action : el.geometry, area : el.area } })\r\n              return(\r\n                <>\r\n                  <h1>{title}</h1>\r\n                  {\r\n                    <div style={{padding : '10px'}}>\r\n                      <Table columns={chooseColumn()} dataSource={tableData} size=\"small\" />\r\n                    </div>\r\n                  }\r\n                  <Divider />\r\n                </>\r\n              ) \r\n            }\r\n            else{\r\n              return null\r\n            }\r\n          }\r\n\r\n          const findIntersection = (searchPolygon, graphics) => {\r\n            return graphics.filter(graphic => geometryEngine.intersects(graphic.geometry, searchPolygon))\r\n          }\r\n\r\n          return(\r\n            <>\r\n            <Descriptions title=\"Detail\" column={1} bordered>\r\n              <Descriptions.Item label=\"Start\">{moment(props.attributes.start_date).format(\"DD/MM/YYYY\")}</Descriptions.Item>\r\n              <Descriptions.Item label=\"End\">{moment(props.attributes.end_date).format(\"DD/MM/YYYY\")}</Descriptions.Item>\r\n              <Descriptions.Item label=\"Total Area\">{props.attributes.total} ha</Descriptions.Item>\r\n            </Descriptions>\r\n              <Divider />\r\n              <h4>Buffer Radius in Kilometers</h4>\r\n              <div style={{position : 'relative'}}>\r\n                <Row>\r\n                  <Col span={17} >\r\n                    <Slider defaultValue={inputValue} max={50} value = { typeof inputValue ==='number'? inputValue : 0 }tooltipPlacement=\"bottom\" onChange={ onChange } />\r\n                  </Col>\r\n                  <Col span={2}>\r\n                    <InputNumber min={0} max={50} style={{ margin: '0 16px' }} value={inputValue} onChange={onChange} />\r\n                  </Col>\r\n                </Row>\r\n              \r\n              <Divider />\r\n              <h4>Show or hide layer</h4>\r\n              {\r\n                layerOptions.map( opt => <Checkbox key={opt.key} value={opt.value} onChange={updateLayerVisibility} >{ opt.label }</Checkbox>)\r\n              }\r\n              <Divider />\r\n              { createList(pomInside, \"POM\") }\r\n              { createList(concInside, \"Concession\") }\r\n              </div>\r\n              <div style={{position : 'sticky', bottom : '0px'}}>\r\n                <Space>\r\n                  <Button type=\"primary\" onClick={ buttonOnClick }>Show List</Button>\r\n                  {/* <Button type=\"primary\" onClick={()=>this.setState({showModal : true})} >Export to PDF</Button> */}\r\n                </Space>\r\n              </div>\r\n            </>\r\n          )\r\n        }\r\n\r\n        //===============================================================\r\n        // BASE FUNCTION\r\n        //===============================================================\r\n        // Fungsi untuk menggambar buffer\r\n        const updateBufferGraphic = ( geometry,size ) => {\r\n          let polySym = {\r\n            type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\r\n            color: [140, 140, 222, 0.5],\r\n            outline: {\r\n              color: [0, 0, 0, 0.5],\r\n              width: 2\r\n            }\r\n          };\r\n          if (size > 0){\r\n            var bufferGeometry = geometryEngine.geodesicBuffer( geometry, size, \"kilometers\")\r\n            if(this.bufferLayer.graphics.length === 0){\r\n              this.bufferLayer.add(\r\n                new Graphic({\r\n                  geometry : bufferGeometry,\r\n                  symbol : polySym\r\n                })\r\n              )\r\n            } else {\r\n              this.bufferLayer.graphics.getItemAt(0).geometry = bufferGeometry\r\n            }\r\n          } else{\r\n            this.bufferLayer.removeAll()\r\n          }\r\n        }\r\n\r\n        // Generate isi dari popup\r\n        const generateContent = (target, title) => {\r\n          console.log(target, title)\r\n          \r\n          let popupDiv = document.createElement('div')\r\n\r\n          if(title === \"POM\"){\r\n            pomPopupTemplate.content = popupDiv\r\n            ReactDOM.render(<DescriptionTable data={target.graphic.attributes} title={title} position={{ latitude: target.graphic.geometry.latitude, longitude: target.graphic.geometry.longitude }} />, popupDiv)\r\n          } \r\n          else if (title === \"Deforestation Point\"){\r\n            dpPopupTemplate.content = popupDiv\r\n\r\n            const onSliderChange = (bufferSize) => {\r\n              let pointGeometry = target.graphic.geometry\r\n              this.setState({\r\n                dfrsPointGeom : pointGeometry\r\n              })\r\n              updateBufferGraphic(pointGeometry, bufferSize)\r\n            }\r\n\r\n            const onCheckboxChange = layerList => {\r\n              layerList.map( layer => {\r\n                layer.visible = true\r\n              })\r\n            }\r\n\r\n            ReactDOM.render(<DfrsPopupContent id={target.graphic.attributes.id} onSliderChange={onSliderChange} attributes={ target.graphic.attributes } />, popupDiv)\r\n          }\r\n\r\n          return popupDiv\r\n        }\r\n\r\n        //===============================================================\r\n        // DOM\r\n        //===============================================================\r\n        // document.getElementById(\"button-form-deforestation\").addEventListener('click', function(e){\r\n        //   console.log(e)\r\n        // })\r\n\r\n        //===============================================================\r\n        // MAP INIT\r\n        //===============================================================\r\n        this.map = new ArcGISMap({\r\n          basemap: 'streets-night-vector'\r\n        });\r\n\r\n        //===============================================================\r\n        // VIEW INIT\r\n        //===============================================================\r\n        this.view = new MapView({\r\n          container: this.mapRef.current,\r\n          map: this.map,\r\n          center: [118, 0],\r\n          zoom: 4,\r\n          popup: {\r\n            dockEnabled: true,\r\n            dockOptions: {\r\n              // Disables the dock button from the popup\r\n              buttonEnabled: false,\r\n              // Ignore the default sizes that trigger responsive docking\r\n              breakpoint: false,\r\n              position : 'top-left'\r\n            }\r\n          }\r\n        });\r\n\r\n        // this.view.when(\r\n        //   () => {\r\n        //     console.log(\"sukses\", this.view) },\r\n        //   function(err){console.log(err)}\r\n        // )\r\n\r\n        //==============================================================\r\n        // LAYER\r\n        //==============================================================\r\n        \r\n        // GROUP PLANTATION\r\n        //\r\n        this.layerPlantationPoint = new FeatureLayer({\r\n          // url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/0\",\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/OilPalm_Plantation_TP_Supplier/MapServer/0\",\r\n          title: \"Oil Palm Plantation\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerPlantationArea = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/2\",\r\n          title: \"Oil Palm Area\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerPeat = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Layer_Fungsi_Ekosistem_Gambut_201907_sde/MapServer/0\",\r\n          title : \"Peat Ecosystem\",\r\n          visible : false,\r\n          outFields : ['*']\r\n        })\r\n        \r\n        // GROUP INDUSTRIES\r\n        //\r\n        // this.layerPkCrushing = new FeatureLayer({\r\n        //   url: \"https://idjktsvr10.wil.local/arcgis/rest/services/industries_MIL1/MapServer/0\",\r\n        //   title: \"PK Crushing\",\r\n        //   visible: false\r\n        // });\r\n\r\n        this.layerRefinery = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Layer_Refinery_201908_sde/MapServer/0\",\r\n          title: \"Refinery\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['*']\r\n        });\r\n\r\n        this.layerPom = new FeatureLayer({\r\n          // url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/1\",\r\n          // url: \"https://gisportal.wilmar.co.id/arcgisserver/rest/services/NewGISInteractiveMap_2/POM/MapServer/1\",\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier_2020/MapServer/1\",\r\n          title: \"3rd Party Mill\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['pomid', 'PomName', 'CompanyNam', 'PlaceName', 'Tankcap', 'Silocap']\r\n        });\r\n        // this.layerPom = importedLayer.layerPom\r\n\r\n        // GROUP DEFORESTATION\r\n        //\r\n        this.layerDeforestationPoint = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/0\",\r\n          title : \"Deforestation Point\",\r\n          visible : false,\r\n          popupEnabled: true,\r\n          outFields : ['*']\r\n        });\r\n        this.map.add(this.layerDeforestationPoint)\r\n\r\n        this.layerDeforestationArea = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/1\",\r\n          title : \"Deforestation Area\",\r\n          visible : false\r\n        });\r\n\r\n        // Basemap WILMAR\r\n        //\r\n        var basemapWilmar = new VectorTileLayer({\r\n          url: 'https://gisportal.wilmar.co.id/arcgisserver/rest/services/Hosted/Wilmar_Basemap2/VectorTileServer?f=pjson'\r\n        });\r\n\r\n        // HOTSPOT\r\n        this.layerHotspot = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Hotspot_HSP1/MapServer/0\",\r\n          title : \"Hotspot\",\r\n          visible : false\r\n        })\r\n        this.map.add(this.layerHotspot)\r\n\r\n        // SKETCH LAYER\r\n        //\r\n        this.sketchLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        this.bufferLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        this.map.addMany([this.sketchLayer, this.bufferLayer])\r\n\r\n        // LAYER GROUPING\r\n        //\r\n        var glIndustries = new GroupLayer({\r\n          title: \"Wilmar Third Party\"\r\n        });\r\n\r\n        var glPlantation = new GroupLayer({\r\n          title : \"Plantation\"\r\n        });\r\n\r\n        var glDeforestation = new GroupLayer({\r\n          title : \"Deforestation\"\r\n        })\r\n\r\n        var glLandIssue = new GroupLayer({\r\n          title : \"Land Issue\"\r\n        })\r\n\r\n        glIndustries.addMany([ this.layerRefinery, this.layerPom, this.layerPlantationArea, this.layerPlantationPoint, ]);\r\n        // glPlantation.addMany([ this.layerPlantationArea, this.layerPlantationPoint, ])\r\n        glDeforestation.addMany([ this.layerDeforestationArea, this.layerDeforestationPoint,  ])\r\n        glLandIssue.addMany([this.layerPeat])\r\n        this.map.addMany([ glIndustries, glDeforestation, glLandIssue]);\r\n\r\n        //=================================================================\r\n        // WIDGET\r\n        //=================================================================\r\n        \r\n        // ZOOM\r\n        var zoomWidget = new Zoom({\r\n          view : this.view\r\n        })\r\n        this.view.ui.components = []\r\n        this.view.ui.add(zoomWidget, \"top-right\");\r\n\r\n        // this.view.whenLayerView(this.layerPom).then((lv)=> console.log(\"lv\",lv))\r\n        // BASEMAP GALERY\r\n        //\r\n        var basemapGallery = new BasemapGallery({\r\n          view: this.view\r\n        });\r\n        var expand = new Expand({\r\n          view: this.view,\r\n          content: basemapGallery,\r\n          expandTooltip: 'Change Basemap'\r\n        });\r\n        this.view.ui.add(expand, \"top-right\");\r\n\r\n        // LAYERLIST\r\n        //\r\n        var layerList = new LayerList({\r\n          view: this.view,\r\n        })\r\n        var expandLayerList = new Expand({\r\n          view: this.view,\r\n          content: layerList,\r\n          expandTooltip: 'Layer List'\r\n        })\r\n        this.view.ui.add(expandLayerList, \"top-right\")\r\n\r\n        // LEGEND\r\n        //\r\n        var legend = new Legend({\r\n          view : this.view,\r\n        })\r\n        this.view.ui.add(legend, \"bottom-right\")\r\n\r\n        //\r\n        //// TIMESLIDER\r\n        //\r\n        const timeSlider = new TimeSlider({\r\n          container: \"timeSlider\",\r\n          playRate: 50,\r\n          stops: {\r\n            interval: {\r\n              value: 1,\r\n              unit: \"hours\"\r\n            }\r\n          }\r\n        });\r\n        // this.view.ui.add(timeSlider, \"manual\");\r\n\r\n        //=================================================================\r\n        //POPUP SET\r\n        //=================================================================\r\n        let pomPopupTemplate = {\r\n          title: 'POM Suplier',\r\n          content: (target) => generateContent(target, \"POM\")\r\n        }\r\n        this.layerPom.popupTemplate = pomPopupTemplate\r\n\r\n        let refineryPopupTemplate = {\r\n          title: 'Refinery',\r\n          content: (target) => generateContent(target, \"Refinery\")\r\n        }\r\n        this.layerRefinery.popupTemplate = refineryPopupTemplate\r\n\r\n        let dpPopupTemplate = {\r\n          title : 'Deforestation Point',\r\n          content : target => generateContent(target, \"Deforestation Point\")\r\n        }\r\n        this.layerDeforestationPoint.popupTemplate = dpPopupTemplate \r\n\r\n        //==================================================================\r\n        // EVENT\r\n        //==================================================================\r\n        watchUtils.whenTrue(this.view, \"stationary\", () => {\r\n          if(this.view.zoom >= 10){\r\n            console.log(this.view.zoom)\r\n            this.layerDeforestationArea.visible = this.layerDeforestationPoint.visible ? true : false \r\n          }\r\n          else{\r\n            this.layerDeforestationArea.visible = false\r\n          }\r\n        })\r\n      });\r\n\r\n\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // console.log(this.context)\r\n    // this.layerPlantationPoint.visible = true\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.view) {\r\n      this.view.container = null\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let dfrsContent\r\n    if(this.state.dfrsResult == null){\r\n      dfrsContent = <Result title=\"Please choose date range\" />\r\n    }\r\n    else if(this.state.dfrsResult.length == 0){\r\n      dfrsContent = <Empty />\r\n    } \r\n    else {\r\n      let content = []\r\n      const impactedId = ['IDN_w0tv4g7_20200908', 'IDN_w0tv675_20200908', 'IDN_w0tv5sw_20200908', 'IDN_w0sxfr1_20200901', '\tIDN_w0u8138_20200906']\r\n      this.state.dfrsResult.map( (features, index) => {\r\n\r\n        let obj = {\r\n          key : index,\r\n          lat : features.attributes.POINT_X,\r\n          lon : features.attributes.POINT_Y,\r\n          startdate : features.attributes.start_date,\r\n          enddate : features.attributes.end_date,\r\n          peatland : features.attributes.peatland,\r\n          mangrove : features.attributes.mangrove,\r\n          other : features.attributes.other,\r\n          total : features.attributes.total,\r\n          zoomTo : ()=>this.f_zoomTo(features.attributes.POINT_Y, features.attributes.POINT_X),\r\n          impacted : impactedId.includes(features.attributes.id) ? true : false\r\n        }\r\n\r\n        let sorter = impactedId.includes(features.attributes.id) ? 1 : 0\r\n        content.push({sorter : sorter, data : obj})\r\n\r\n      })\r\n\r\n      let c = _.orderBy(content, ['sorter'], ['desc'])\r\n      console.log(c)\r\n      let d = _.map(c, function(el, i){\r\n        let dat = {...el.data, index : i + 1}\r\n\r\n        return <DfrsCard key={dat.key} lat={dat.lat} lon={dat.lon} startdate={dat.startdate} enddate={dat.enddate} peatland={dat.peatland} mangrove={dat.mangrove} other={dat.other} total={dat.total} index={dat.index} zoomTo={dat.zoomTo} impacted={dat.impacted} />\r\n      })\r\n\r\n        dfrsContent = <Space direction=\"vertical\">{d}</Space>\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"webmap\" ref={this.mapRef} />\r\n        <div className=\"spinner\">\r\n          <Spin spinning={this.state.isLoading} size=\"large\" tip=\"Loading...\" />\r\n        </div>\r\n        {/* <div id=\"timeSlider\"></div> */}\r\n        <ButtonNotif onClick={ ()=>this.f_showDrawer(true) } count={4} />\r\n        <ButtonClear onClick={ this.f_clearBufferLayers }  />\r\n        <ButtonFire className=\"button-hotspot\" onClick={ () => this.layerHotspot.visible = ! this.layerHotspot.visible } />\r\n        <Drawer\r\n          title=\"Deforestation\"\r\n          placement=\"right\"\r\n          closable={true}\r\n          onClose={ () => this.f_showDrawer(false) }\r\n          visible={this.state.isDrawerShow}\r\n          width={500}\r\n        >\r\n          <DeforestationForm timesRange={this.f_getDatesRange(moment(\"20190215\"), moment())} onFinish={this.f_dfrsFormOnFinish} onClear={this.f_onClear} />\r\n          <Divider />\r\n          <div style={{display : 'flex', flexDirection : 'column', justifyContent : 'space-between'}}>\r\n            {dfrsContent}\r\n          </div>\r\n        </Drawer>\r\n        <Modal\r\n          title=\"Detail\"\r\n          visible={this.state.showModal}\r\n          onOk={(e)=>this.setState({showModal : false})}\r\n          onCancel={(e)=>this.setState({showModal : false})}\r\n          width=\"80vw\"\r\n          destroyOnClose={true}\r\n        >\r\n          <ModalContent data={this.state.modalData} location={this.state.dfrsPointGeom} dfrsArea={this.state.dfrsAreaGeom} />\r\n        </Modal>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapApp","import React from 'react'\r\nimport {Statistic} from 'antd'\r\n\r\nconst TotalTitle = (props) => {\r\n  return(\r\n    // <Statistic value={props.value} valueStyle={{fontSize : '15vh'}} />\r\n    <Statistic value={props.value} />\r\n  )\r\n}\r\n\r\nexport default TotalTitle","import React, { PureComponent } from 'react';\r\nimport {\r\n  PieChart, Pie, Legend, Tooltip, Cell\r\n} from 'recharts';\r\n\r\nconst data01 = [\r\n  { name: 'Have Plantation', value: 310 }, { name: 'Not have Plantation', value: 190 },\r\n];\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042']\r\n\r\nexport default class Example extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/k9jkog04/';\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <PieChart width={400} height={400}>\r\n        <Pie dataKey=\"value\" isAnimationActive={false} data={data01} cx={200} cy={200} outerRadius={100} fill=\"#8884d8\" innerRadius={60} label >\r\n          {\r\n          \tdata01.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)\r\n          }\r\n        </Pie>\r\n        <Tooltip />\r\n      </PieChart>\r\n    </>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  PieChart, Pie, Legend, Tooltip, Cell\r\n} from 'recharts';\r\n\r\nconst data01 = [\r\n  { name: 'Peat Area', value: 290 }, { name: 'Peat Loss', value: 10 },\r\n];\r\n\r\nconst COLORS = ['#FFBB28', '#FF8042']\r\n\r\nexport default class Example extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/k9jkog04/';\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <PieChart width={400} height={400}>\r\n        <Pie dataKey=\"value\" isAnimationActive={false} data={data01} cx={200} cy={200} outerRadius={100} fill=\"#8884d8\" innerRadius={60} label >\r\n          {\r\n          \tdata01.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)\r\n          }\r\n        </Pie>\r\n        <Tooltip />\r\n      </PieChart>\r\n    </>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\r\n} from 'recharts';\r\n\r\nconst data = [\r\n  {\r\n    name: 'Jan', area: 1.2,\r\n  },\r\n  {\r\n    name: 'Feb', area: 2.2,\r\n  },\r\n  {\r\n    name: 'Mar', area: 3.2,\r\n  },\r\n  {\r\n    name: 'Apr', area: 2.9,\r\n  },\r\n  {\r\n    name: 'May', area: 2.2,\r\n  },\r\n  {\r\n    name: 'June', area: 1.9,\r\n  },\r\n  {\r\n    name: 'Jul', area: 2.0,\r\n  },\r\n  {\r\n    name: 'Aug', area: 0.5,\r\n  },\r\n  {\r\n    name: 'Sep', area: 0.6,\r\n  },\r\n  {\r\n    name: 'Oct', area: 0.2,\r\n  },\r\n  {\r\n    name: 'Nov', area: 1.1,\r\n  },\r\n  {\r\n    name: 'Dec', area: 1.3,\r\n  },\r\n];\r\n\r\nexport default class AreaCharts extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      {/* <span className=\"title\" >Deforestation by Month</span> */}\r\n      <AreaChart\r\n        width={900}\r\n        height={100}\r\n        data={data}\r\n        margin={{\r\n          top: 20, left: 20, bottom: 20, right : 20\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Area type=\"monotone\" dataKey=\"area\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n      </AreaChart>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport {Row, Col, Card, Space} from 'antd'\r\nimport TotalTitle from '../Components/Charts/TotalTitle'\r\nimport DoughnoutCharts from '../Components/Charts/DoughnoutCharts' \r\nimport PeatCharts from '../Components/Charts/PeatCharts' \r\nimport AreaCharts from '../Components/Charts/AreaCharts' \r\n\r\nclass Dashboard extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"dashboard-wrapper\">\r\n        <Row>\r\n          <Col span={8}>\r\n            <div style={{height : '45vh'}}>\r\n                <Card title=\"Total Cover Loss(Ha)\" style={{height : '50%'}}>\r\n                  <TotalTitle value={12000} />\r\n                </Card>\r\n                <Card title=\"Total Cover Loss(Ha)\" style={{height : '50%'}}>\r\n                  <TotalTitle value={12000} />\r\n                </Card>\r\n            </div>\r\n          </Col>\r\n          <Col span={16}>\r\n            <div style={{height : '45vh'}}>\r\n              <Card title = \"Deforestation by Month\" style={{height : '100%'}}>\r\n                <AreaCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row style={{height : '45vh'}}>\r\n          <Col span={8}>\r\n            <div style={{maxHeight : '45vh'}}>\r\n              <Card title=\"Concession Ratio\" style={{height : '100%'}} >\r\n                <DoughnoutCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n          <Col span={8}>\r\n            <div style={{maxHeight : '50vh'}}>\r\n              <Card title=\"Concession Ratio\" style={{height : '100%'}} >\r\n                <DoughnoutCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n          <Col span={8}>\r\n            <div style={{maxHeight : '50vh'}}>\r\n              <Card title=\"Concession Ratio\" style={{height : '100%'}} >\r\n                <DoughnoutCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Dashboard","import React from 'react';\nimport ButtonNotif from './Components/ButtonNotif';\nimport Sidebar from './Containers/Sidebar'\nimport MapApp from './Containers/MapApp'\nimport Dashboard from './Containers/Dashboard'\nimport { ContextProvider, Consumer } from './Config/context'\nimport { Layout } from 'antd';\nimport './App.css';\n\nconst { Content } = Layout\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sidebar />\n        <Layout className=\"site-layout\">\n          <Content style={{ margin: '0 0px' }}>\n            <div className=\"site-layout-background\" style={{ minHeight: '100vh' }}>\n              <Consumer>\n                {\n                  context => {\n                    if(context.activePage == 'dashboard') {\n                      return <Dashboard />\n                    } \n                    else if(context.activePage == 'map') {\n                      return <MapApp />\n                    }\n                  }\n                }\n              </Consumer>\n              {/* <MapApp /> */}\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    </ContextProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}