{"version":3,"sources":["Components/DeforestationForm.jsx","Components/ButtonNotif.jsx","Config/context.js","Containers/Sidebar.jsx","Components/ButtonClear.jsx","Components/ButtonFire.jsx","Components/DfrsCard.jsx","Components/ModalContent.jsx","Containers/MapApp.jsx","Containers/tes.js","Components/Charts/TotalTitle.jsx","Components/Charts/DoughnoutCharts.jsx","Components/Charts/PeatCharts.jsx","Components/Charts/AreaCharts.jsx","Containers/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["formItemLayout","labelCol","xs","span","sm","wrapperCol","wrapperStyle","offset","DeforestationForm","props","useState","isTimeRangeDisable","setTimeRangeDisabled","isPeriodDisable","setPeriodDisabled","activeRadio","setActiveRadio","timesRange","name","onFinish","e","Group","onChange","target","value","Item","label","RangePicker","format","disabled","placeholder","map","el","i","start","end","Option","key","moment","type","htmlType","id","onClick","onClear","ButtonNotif","visible","setVisible","Fragment","className","count","shape","size","NotificationFilled","title","placement","closable","onClose","width","ContextType","React","createContext","Provider","Consumer","ContextProvider","state","activePage","f_setActivePage","setState","this","children","Component","Sidebar","Menu","SubMenu","context","useContext","collapsed","Sider","theme","defaultSelectedKeys","mode","icon","FileOutlined","PieChartOutlined","ButtonClear","ClearOutlined","ButtonFire","danger","FireFilled","DfrsCard","headStyle","impacted","backgroundColor","index","extra","zoomTo","layout","lat","lon","Date","startdate","enddate","peatland","mangrove","other","total","doc","jsPDF","orientation","columnsPom","dataIndex","sorter","a","b","localeCompare","sortDirections","distance","render","status","color","columnsConc","columnsPeat","columnHotspot","ModalContent","generatePdf","text","headPom","dataPom","pomData","company","group","kabupaten","province","capacity","autoTable","head","body","startY","rowPageBreak","bodyStyles","valign","headConc","dataConc","concData","totalArea","totalImpacted","lastAutoTable","finalY","headPeat","dataPeat","peatData","remark","area","headHs","dataHs","hotspotData","latitude","longitude","acq_date","verification","save","processingData","loadModules","then","geometryEngine","projection","SpatialReference","data","arrayPom","arrayConc","arrayPeat","arrayHotspot","console","log","dfrsLoc","location","endLoc","geometry","jarak","getDistance","no","attributes","PomName","distanceNumber","GroupName","Kabupaten","PROPNAME","Tankcap","CompanyNam","sort","dataHotspot","Loc_Date","Latitude","Longitude","Verificati","load","outSpatialReference","wkid","g1","project","dfrsArea","g2","j","isIntersect","intersects","intersectArea","intersect","geodesicArea","toTitleCase","Name","toFixed","Province","Total_Ha","isNaN","parseFloat","Category","Promise","all","konsesi","peat","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","style","height","overflow","paddingLeft","paddingRight","dataSource","columns","_","css","require","WsEndPoint","MapApp","f_showDrawer","showed","isDrawerShow","f_dfrsFormOnFinish","datamoment","whereCond","timeSelection","startDate","endDate","split","f_getDatesRange","query","layerDeforestationPoint","createQuery","where","layerDeforestationArea","queryFeatures","response","dfrsResult","features","definitionExpression","f_zoomTo","f","view","goTo","tilt","whenLayerView","layerview","result","highlightArea","remove","highlight","f_fetchTimeDfrs","fetch","json","timedata","f_clearBufferLayers","bufferLayer","removeAll","f_onClear","f_hotspot","f_downloadPdf","mapRef","createRef","showModal","modalData","isLoading","dfrsPointGeom","dfrsAreaGeom","dark","light","nextStartDate","arr","add","push","reverse","ArcGISMap","MapView","VectorTileLayer","BasemapGallery","Expand","LayerList","FeatureLayer","GroupLayer","Graphic","GraphicsLayer","Legend","watchUtils","Query","TimeSlider","Zoom","DescriptionTable","isTrace","setTrace","detailDescription","Object","keys","f_traceData","layername","url","layerPom","layerRefinery","resultData","lineSymbol","spiderLine","paths","X_Coor","Y_Coor","spiderLineGraphic","symbol","graphics","catch","error","f_clearGraphic","fontSize","bordered","column","pomid","position","rfid","f_button","DfrsPopupContent","layerPlantationArea","r","inputValue","setInputValue","pomInside","setPomInside","concInside","setConcInside","layerOptions","layerPeat","updateLayerVisibility","checked","checkFeatureInside","onSliderChange","forEach","layer","filterFeatureInside","dfFeatures","feature","calculateArea","intersectGeometry","concessionResult","geom1","geom2","geom","undefined","getItemAt","filter","spatialRelationship","returnGeometry","zoomToFeature","record","createList","concessionColumn","layerIntersectPolygon","polygonGraphic","outline","zoomToIntersect","mapingField","length","tableData","action","padding","start_date","end_date","defaultValue","max","tooltipPlacement","min","margin","opt","bottom","outFields","query2","queryHotspot","layerHotspot","featureSet","generateContent","popupDiv","document","createElement","pomPopupTemplate","content","ReactDOM","graphic","dpPopupTemplate","bufferSize","pointGeometry","bufferGeometry","geodesicBuffer","updateBufferGraphic","basemap","container","current","center","zoom","popup","dockEnabled","dockOptions","buttonEnabled","breakpoint","layerPlantationPoint","layerPkCrushing","popupEnabled","sketchLayer","listMode","addMany","glIndustries","glDeforestation","glLandIssue","zoomWidget","ui","components","basemapGallery","expand","expandTooltip","layerList","expandLayerList","legend","playRate","stops","interval","unit","popupTemplate","refineryPopupTemplate","concAreaTemplate","hsTemplate","daPopupTemplate","when","layerview1","on","evt","screenPoint","x","y","hitTest","results","whenTrue","dfrsContent","impactedId","obj","POINT_X","POINT_Y","includes","c","orderBy","d","dat","direction","ref","spinning","tip","block","display","flexDirection","justifyContent","onOk","onCancel","destroyOnClose","contextType","TotalTitle","data01","COLORS","Example","dataKey","isAnimationActive","cx","cy","outerRadius","fill","innerRadius","entry","PureComponent","jsfiddleUrl","AreaCharts","top","left","right","strokeDasharray","stroke","Dashboard","maxHeight","Content","Layout","App","minHeight","Boolean","window","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b4292df2.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form, Space, Select, Checkbox, Radio } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport { propTypes } from 'react-bootstrap/esm/Image';\r\nimport moment from 'moment'\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n}\r\n\r\nconst wrapperStyle = {\r\n  xs: {\r\n    span: 24,\r\n    offset: 0,\r\n  },\r\n  sm: {\r\n    span: 16,\r\n    offset: 8,\r\n  },\r\n}\r\n\r\nconst DeforestationForm = (props) => {\r\n  const [isTimeRangeDisable, setTimeRangeDisabled ] = useState(true)\r\n  const [isPeriodDisable, setPeriodDisabled ] = useState(true)\r\n  const [activeRadio, setActiveRadio] = useState('todate')\r\n\r\n  const onRadioChange = e => {\r\n    setActiveRadio(e.target.value)\r\n    if(e.target.value == \"period\"){\r\n      setPeriodDisabled(false)\r\n      setTimeRangeDisabled(true)\r\n    }\r\n    else if(e.target.value == \"range-picker\"){\r\n      setPeriodDisabled(true)\r\n      setTimeRangeDisabled(false)\r\n    }\r\n    else if(e.target.value == \"all\"){\r\n      setPeriodDisabled(true)\r\n      setTimeRangeDisabled(true)\r\n    }\r\n    else if(e.target.value == 'todate' ){\r\n      setPeriodDisabled(true)\r\n      setTimeRangeDisabled(true)\r\n    }\r\n  }\r\n\r\n  function getDatesRange(startdate, enddate){\r\n    let nextStartDate = startdate\r\n    let arr = []\r\n    while(nextStartDate <= enddate){\r\n      let start = nextStartDate.format()\r\n      let end = nextStartDate.add(13, 'days').format()\r\n      arr.push([ start, end ])\r\n      nextStartDate = nextStartDate.add(1, 'days')\r\n    }\r\n    return arr.reverse()\r\n  }\r\n\r\n  // let timesRange =  getDatesRange(moment(\"20190215\"), moment())\r\n  let timesRange = props.timesRange\r\n\r\n  return (\r\n    <Form name=\"deforestation_control\" {...formItemLayout} onFinish={ (e) => props.onFinish(e, activeRadio) } >\r\n      <Radio.Group onChange={ onRadioChange } value={activeRadio}>\r\n        <Radio value=\"todate\">To Date</Radio>\r\n        <Radio value=\"range-picker\">Time Range</Radio>\r\n        <Radio value=\"period\">Time Period</Radio>\r\n        <Radio value=\"all\">Select All</Radio>\r\n      </Radio.Group>\r\n      <Divider />\r\n      <Form.Item name=\"range-picker\" label=\"Time Range\">\r\n          <DatePicker.RangePicker format=\"YYYY/MM/DD\" disabled={isTimeRangeDisable} />\r\n      </Form.Item>\r\n      <Divider>Or</Divider>\r\n      <Form.Item name=\"period-time\" label=\"Period Time\">\r\n        <Select placeholder=\"select time period\" disabled={isPeriodDisable}>\r\n          {\r\n            timesRange.map( (el, i) => {\r\n              let [start, end] = el\r\n              return (<Select.Option key={i} value={ `${ moment(start).format(\"YYYY-MM-DD\") }|${ moment( end ).format(\"YYYY-MM-DD\") }`}>\r\n                { moment( start ).format(\"MMM Do YYYY\")} - { moment( end ).format(\"MMM Do YYYY\")}\r\n              </ Select.Option> )\r\n            })\r\n          }\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item wrapperCol={wrapperStyle} >\r\n        <Space>\r\n          <Button type=\"primary\" htmlType=\"submit\" id=\"button-form-deforestation\">Submit</Button>\r\n          <Button type=\"primary\" onClick={props.onClear} >Clear</Button>\r\n        </Space>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default DeforestationForm","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport DeforestationForm from './DeforestationForm'\r\n\r\nlet ButtonNotif = (props) => {\r\n  let [visible, setVisible] = useState(false)\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"button-notif\">\r\n        <Badge count={props.count}>\r\n          {/* <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={showDrawer} > */}\r\n          <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={props.onClick} >\r\n            <NotificationFilled />\r\n          </Button>\r\n        </Badge>\r\n      </div>\r\n      <Drawer\r\n        title=\"Deforestation\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={500}\r\n      >\r\n        {/* <DeforestationForm onFinish={(data) => console.log(\"halo\", data)} /> */}\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ButtonNotif","import React from 'react'\r\n\r\nlet ContextType = React.createContext()\r\nconst {Provider, Consumer} = ContextType\r\n\r\nclass ContextProvider extends React.Component{\r\n  state = {\r\n    activePage : 'map'\r\n  }\r\n\r\n  f_setActivePage = (value) => {\r\n    this.setState({ activePage : value})\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Provider value = {{\r\n        ...this.state,\r\n        f_setActivePage : this.f_setActivePage\r\n      }}>\r\n        {this.props.children}\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport{ ContextProvider, Consumer, ContextType}\r\n","import React, { useState, useContext } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport {ContextType} from '../Config/context'\r\nimport {\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n} from '@ant-design/icons';\r\nconst { SubMenu } = Menu;\r\n\r\nlet Sidebar = (props) => {\r\n  let context = useContext(ContextType)\r\n  const [collapsed, setCollapsed] = useState(true)\r\n\r\n  const f_handleChange = function(e){\r\n    context.f_setActivePage(e.key)\r\n  }\r\n\r\n  return (\r\n    <Layout.Sider collapsed={collapsed}>\r\n      <div className=\"logo\">\r\n      </div>\r\n      <Menu theme=\"dark\" onClick={f_handleChange} defaultSelectedKeys={[context.activePage]} mode=\"inline\">\r\n        <Menu.Item key=\"dashboard\" icon={<FileOutlined />} />\r\n        <Menu.Item key=\"map\" icon={<PieChartOutlined />}>\r\n          Maps\r\n        </Menu.Item>\r\n      </Menu>\r\n    </ Layout.Sider>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form } from 'antd'\r\nimport { ClearOutlined } from '@ant-design/icons'\r\nimport DeforestationForm from './DeforestationForm'\r\n\r\nconst ButtonClear = (props) => {\r\n  let [visible, setVisible] = useState(false)\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"button-clear\">\r\n        <Badge count={props.count}>\r\n          {/* <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"ButtonClear\" onClick={showDrawer} > */}\r\n          <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonClear\" onClick={props.onClick} >\r\n            <ClearOutlined />\r\n          </Button>\r\n        </Badge>\r\n      </div>\r\n      <Drawer\r\n        title=\"Deforestation\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={500}\r\n      >\r\n        {/* <DeforestationForm onFinish={(data) => console.log(\"halo\", data)} /> */}\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ButtonClear","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport { FireFilled } from '@ant-design/icons'\r\n\r\nconst ButtonFire = (props) => {\r\n  return (\r\n    <div className={props.className}>\r\n        <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonClear\" onClick={props.onClick} danger={true}>\r\n          <FireFilled />\r\n        </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ButtonFire","import React from 'react'\r\nimport { Card, Descriptions, Button } from 'antd'\r\nimport moment from 'moment'\r\n\r\nconst DfrsCard = props => {\r\n  let redHead = {backgroundColor : 'red'}\r\n  let headStyle = props.impacted ? redHead : null\r\n  return (\r\n    <Card type=\"inner\" title={`Deforestation ${props.index}`} headStyle={headStyle}  extra={<Button type=\"dashed\" onClick={props.zoomTo} >Zoom to</Button>}>\r\n      <Descriptions size=\"small\" layout=\"vertical\" >\r\n        <Descriptions.Item label=\"Latitude\">{props.lat}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Longitude\">{props.lon}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Start Date\">{ moment(new Date(props.startdate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"End Date\">{ moment( new Date(props.enddate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Peatland\">{props.peatland} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Mangrove\">{props.mangrove} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Other\">{props.other} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Total\">{props.total} ha</Descriptions.Item>\r\n        {/* <Descriptions.Item label=\"id\">{props.id} ha</Descriptions.Item> */}\r\n      </Descriptions>\r\n    </Card>\r\n  )\r\n}\r\nexport default DfrsCard","import React, { useEffect, useState } from 'react'\r\nimport { Table, Divider, Tag, Button } from 'antd'\r\nimport { getDistance } from 'geolib'\r\nimport { loadModules } from 'esri-loader'\r\nimport $ from 'jquery'\r\nimport jsPDF from 'jspdf'\r\nimport 'jspdf-autotable'\r\n// import autoTable from 'jspdf-autotable'\r\n\r\nconst doc = new jsPDF({\r\n  orientation: \"landscape\"\r\n})\r\n\r\nconst columnsPom = [\r\n  {\r\n    title: 'Pom Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    span: 10,\r\n    sorter: (a, b) => a.name.localeCompare(b.name),\r\n    sortDirections: ['ascend']\r\n  },\r\n  {\r\n    title: 'Company',\r\n    dataIndex: 'company',\r\n    key: 'company',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Group',\r\n    dataIndex: 'group',\r\n    key: 'group',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'District',\r\n    dataIndex: 'kabupaten',\r\n    key: 'kabupaten',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Province',\r\n    dataIndex: 'province',\r\n    key: 'province',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Capacity',\r\n    dataIndex: 'capacity',\r\n    key: 'capacity',\r\n    span: 10,\r\n  },\r\n  {\r\n    title: 'Distance (estimation) in Km',\r\n    dataIndex: 'distance',\r\n    key: 'distance',\r\n    span: 10,\r\n    sorter: (a, b) => a.distance - b.distance\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    span: 10,\r\n    render: status => {\r\n      let color = status == \"warning\" ? 'yellow' : 'red'\r\n      return (\r\n        <Tag color={color} key={status}>\r\n          {status}\r\n        </Tag>\r\n      )\r\n    }\r\n  },\r\n];\r\nconst columnsConc = [\r\n  {\r\n    title: 'Concession',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Group',\r\n    dataIndex: 'group',\r\n    key: 'groupe',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Province',\r\n    dataIndex: 'province',\r\n    key: 'provincee',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Total Area',\r\n    dataIndex: 'totalArea',\r\n    key: 'totalArea',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Impacted',\r\n    dataIndex: 'totalImpacted',\r\n    key: 'totalImpacted',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Distance in Km (Estimation)',\r\n    dataIndex: 'distance',\r\n    key: 'distance',\r\n    span : 10,\r\n    sorter: (a, b) => a.distance - b.distance,\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    span: 10,\r\n    render: status => {\r\n      let color = status == \"warning\" ? 'yellow' : 'red'\r\n      return (\r\n        <Tag color={color} key={status}>\r\n          {status}\r\n        </Tag>\r\n      )\r\n    }\r\n  },\r\n];\r\nconst columnsPeat = [\r\n  {\r\n    title : 'Remarks',\r\n    dataIndex : 'remark',\r\n    key : 'remark',\r\n    span : 10\r\n  },\r\n  {\r\n    title: 'Distance in Km (Estimation)',\r\n    dataIndex: 'distance',\r\n    key: 'distance',\r\n    span : 10,\r\n    sorter: (a, b) => a.distance - b.distance,\r\n  },\r\n  {\r\n    title : 'Total Area',\r\n    dataIndex : 'area',\r\n    key : 'area',\r\n    span : 10\r\n  },\r\n  // {\r\n  //   title: \"Action\",\r\n  //   dataIndex: 'action',\r\n  //   key: 'action',\r\n  //   span: 10\r\n  // }\r\n]\r\nconst columnHotspot = [\r\n  {\r\n    title : 'Latitude',\r\n    dataIndex : 'latitude',\r\n    key : 'latitude',\r\n    span : 10\r\n  },\r\n  {\r\n    title : 'Longitude',\r\n    dataIndex : 'longitude',\r\n    key : 'longitude',\r\n    span : 10\r\n  },\r\n  {\r\n    title : 'Acquisition Date',\r\n    dataIndex : 'acq_date',\r\n    key : 'acq_date',\r\n    span : 10\r\n  },\r\n  {\r\n    title : 'Verification',\r\n    dataIndex : 'verification',\r\n    key : 'verification',\r\n    span : 10\r\n  },\r\n]\r\n\r\n\r\nclass ModalContent extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      pomData : [],\r\n      concData : [],\r\n      peatData : [],\r\n      hotspotData : []\r\n    }\r\n  }\r\n\r\n  toTitleCase(str) {\r\n    return str.replace(\r\n      /\\w\\S*/g,\r\n      function(txt) {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n      }\r\n    );\r\n  }\r\n\r\n  generatePdf = () => {\r\n    doc.text('Basic Information', 14, 20)\r\n    doc.text( \"Location : 100.2854, 2.3290\", 14, 30)\r\n    doc.text( \"Radius : 40 Km\", 14, 40)\r\n    doc.text( \"Time Period : 8/28/2020 - 9/10/2020\", 14, 50)\r\n\r\n\r\n    // POM\r\n    let headPom = columnsPom.map(el => el.title)\r\n    let dataPom = this.state.pomData.map(\r\n      el => {\r\n        return [el.name, el.company, el.group, el.kabupaten, el.province, el.capacity, el.distance, el.status]\r\n      }\r\n    )\r\n\r\n    doc.text(\"3rd Party Mill\", 14,  70)\r\n    doc.autoTable({\r\n      head : [headPom],\r\n      body : dataPom,\r\n      startY: 75,\r\n      // styles: { overflow: 'ellipsize', cellWidth: 'wrap' },\r\n      // Override the default above for the text column\r\n      // columnStyles: { text: { cellWidth: 'auto' } },\r\n      rowPageBreak: 'auto',\r\n      bodyStyles: { valign: 'top' },\r\n    })\r\n\r\n    // CONCESSION\r\n    let headConc = columnsConc.map(el => el.title)\r\n    let dataConc = this.state.concData.map(\r\n      el => {\r\n        return [el.name, el.group, el.province, el.totalArea,el.totalImpacted, el.distance, el.status]\r\n      }\r\n    )\r\n    doc.text(\r\n      \"Concession\",\r\n      14,\r\n      doc.lastAutoTable.finalY + 20\r\n    )\r\n    doc.autoTable({\r\n      head : [headConc],\r\n      body : dataConc,\r\n      startY: doc.lastAutoTable.finalY + 25,\r\n      rowPageBreak: 'auto',\r\n      bodyStyles: { valign: 'top' },\r\n    })\r\n\r\n    // PEATLAND\r\n    let headPeat = columnsPeat.map(el => el.title )\r\n    let dataPeat = this.state.peatData.map(\r\n      el => {\r\n        return [ el.remark, el.distance, el.area ]\r\n      }\r\n    )\r\n    doc.text(\r\n      \"Peatland\",\r\n      14,\r\n      doc.lastAutoTable.finalY + 20\r\n    )\r\n    doc.autoTable({\r\n      head : [headPeat],\r\n      body : dataPeat,\r\n      startY: doc.lastAutoTable.finalY + 25,\r\n      rowPageBreak: 'auto',\r\n      bodyStyles: { valign: 'top' },\r\n    })\r\n\r\n    // HOTSPOT\r\n    let headHs = columnHotspot.map(el => el.title)\r\n    let dataHs = this.state.hotspotData.map(\r\n      el => {\r\n        return [el.latitude, el.longitude, el.acq_date, el.verification]\r\n      }\r\n    )\r\n    doc.text(\r\n      \"HotSpot\",\r\n      14,\r\n      doc.lastAutoTable.finalY + 20\r\n    )\r\n    doc.autoTable({\r\n      head : [headHs],\r\n      body : dataHs,\r\n      startY: doc.lastAutoTable.finalY + 25,\r\n      rowPageBreak: 'auto',\r\n      bodyStyles: { valign: 'top' },\r\n    })\r\n\r\n    doc.save('table.pdf')\r\n  }\r\n\r\n  processingData = () => {\r\n    loadModules([\r\n      \"esri/geometry/geometryEngine\",\r\n      \"esri/geometry/projection\",\r\n      \"esri/geometry/SpatialReference\"\r\n    ]).then(([geometryEngine, projection, SpatialReference]) => {\r\n      let props = this.props\r\n      const [arrayPom, arrayConc, arrayPeat, arrayHotspot] = props.data\r\n      console.log(\"modalcontent\", props.data)\r\n      const dfrsLoc = { latitude: props.location.latitude, longitude: props.location.longitude }\r\n      // console.log(\"hs\", arrayHotspot)\r\n      // console.log(arr)\r\n      // destructuring data POM dan loop, sehingga didapatkan jarak ke titik deforestasi\r\n      let dataPom = arrayPom.map((el, i) => {\r\n        let endLoc = { latitude: el.geometry.latitude, longitude: el.geometry.longitude }\r\n        let jarak = getDistance(dfrsLoc, endLoc)\r\n        let status = jarak > 1000 ? 'warning' : 'impacted'\r\n        return {\r\n          key: i,\r\n          no: i + 1,\r\n          name: el.attributes.PomName,\r\n          distance: jarak / 1000,\r\n          distanceNumber: jarak,\r\n          status: status,\r\n          group : el.attributes.GroupName,\r\n          kabupaten : el.attributes.Kabupaten,\r\n          province : el.attributes.PROPNAME,\r\n          capacity : el.attributes.Tankcap,\r\n          company : el.attributes.CompanyNam\r\n        }\r\n      })\r\n      // sort ascending\r\n      dataPom.sort((a, b) => a.distanceNumber - b.distanceNumber)\r\n      // console.log(\"datapom\", dataPom)\r\n\r\n      let dataHotspot = arrayHotspot.map( (el,i) => {\r\n        return{\r\n          key : i,\r\n          acq_date : el.attributes.Loc_Date,\r\n          latitude : el.attributes.Latitude,\r\n          longitude : el.attributes.Longitude,\r\n          verification : el.attributes.Verificati\r\n        }\r\n      })\r\n      console.log(\"dataHotspot\", dataHotspot)\r\n\r\n      // Destructuring data konsesi, karena datanya berupa area dan projeksinya berbeda, perlu load module projection dari Arcmap\r\n      // dan akan mereturn promise\r\n      let dataConc = arrayConc.map((el, i) => {\r\n        return projection.load().then(\r\n          () => {\r\n            let area\r\n            let outSpatialReference = new SpatialReference({\r\n              wkid: 3857 //Sphere_Sinusoidal projection\r\n            });\r\n            let g1 = projection.project(props.dfrsArea, outSpatialReference)\r\n            let g2 = projection.project(el.geometry, outSpatialReference)\r\n            let j = geometryEngine.distance(g1, g2)\r\n            let status = j < 10 ? 'impacted' : 'warning'\r\n\r\n            let isIntersect = geometryEngine.intersects(g1, g2)\r\n            console.log(\"intersect\", isIntersect)\r\n            if(isIntersect){\r\n              let intersectArea = geometryEngine.intersect(g1,g2)\r\n              area = geometryEngine.geodesicArea(intersectArea, \"hectares\")\r\n            }\r\n            else{\r\n              area = ''\r\n            }\r\n\r\n            let result = {\r\n              key: i,\r\n              no: i + 1,\r\n              name: this.toTitleCase( el.attributes.Name ),\r\n              // area: 10,\r\n              distance: (j / 1000).toFixed(2),\r\n              status: status,\r\n              group : el.attributes.GroupName,\r\n              province : el.attributes.Province,\r\n              totalArea : el.attributes.Total_Ha,\r\n              totalImpacted : isNaN(area)? '' : parseFloat(area).toFixed(3)\r\n            }\r\n            return result\r\n          }\r\n        )\r\n      })\r\n\r\n      // Destructuring data Peat\r\n      let dataPeat = arrayPeat.map( (el, i) => {\r\n        console.log(\"el\", el)\r\n        return projection.load().then(\r\n          () => {\r\n            let outSpatialReference = new SpatialReference({\r\n              wkid: 3857 //Sphere_Sinusoidal projection\r\n            });\r\n            let g1 = projection.project(props.dfrsArea, outSpatialReference)\r\n            let g2 = projection.project(el.geometry, outSpatialReference)\r\n            let j = geometryEngine.distance(g1, g2)\r\n            let status = j < 1000 ? 'impacted' : 'warning'\r\n            return {\r\n              remark : el.attributes.Category,\r\n              area : el.attributes[\"SHAPE.STArea()\"].toFixed(2),\r\n              key : i,\r\n              status : status,\r\n              distance: (j / 1000).toFixed(2),\r\n            }\r\n          }\r\n        )\r\n      })\r\n\r\n      // Karena data konsesi yang bersinggunan mereturn promise, makan perlu di promise all array tersebut, setekah promise sukses kemudian ubah state agar tampilan data berubah\r\n      Promise.all(dataConc).then(\r\n        // konsesi => setConcData(konsesi)\r\n        konsesi => this.setState({\r\n          concData : konsesi\r\n        })\r\n      )\r\n      Promise.all(dataPeat).then(\r\n        // peat => setPeatData(peat)\r\n        peat => this.setState({\r\n          peatData : peat\r\n        })\r\n      )\r\n      // setPomData(dataPom)\r\n      // setHotspotData(dataHotspot)\r\n\r\n      this.setState({\r\n        hotspotData : dataHotspot,\r\n        pomData : dataPom\r\n      })\r\n    })\r\n  \r\n  }\r\n\r\n  componentDidMount(){\r\n    this.processingData()\r\n  }\r\n\r\n  render(){\r\n    let { pomData, concData, peatData, hotspotData} = this.state\r\n    return(\r\n    <div style={{ height: '60vh', overflow: 'scroll', paddingLeft: '5vw', paddingRight: '5vw' }}>\r\n      <h2>Mill - Third Party Supplier</h2>\r\n      <Table id=\"pomTable\" dataSource={pomData} columns={columnsPom} />\r\n      <Divider />\r\n      <h2>Concession</h2>\r\n      <Table dataSource={concData} columns={columnsConc} />\r\n      <Divider />\r\n      <h2>Peat</h2>\r\n      <Table dataSource={peatData} columns={columnsPeat} />\r\n      <Divider />\r\n      <h2>Hotspot</h2>\r\n      <Table dataSource={hotspotData} columns={columnHotspot} />\r\n      <Divider />\r\n      <Button type=\"dashed\" onClick={this.generatePdf} >Export to PDF</Button>\r\n      <Divider />\r\n    </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default ModalContent","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ContextType} from '../Config/context'\r\nimport { loadModules } from 'esri-loader';\r\nimport { Button, Descriptions, Divider, Drawer, Slider, Checkbox, Space, Result, Empty, Modal, InputNumber, Row, Col, Spin, Table } from 'antd'\r\nimport ButtonNotif from '../Components/ButtonNotif';\r\nimport ButtonClear from '../Components/ButtonClear';\r\nimport ButtonFire from '../Components/ButtonFire'\r\nimport DeforestationForm from '../Components/DeforestationForm';\r\nimport DfrsCard from '../Components/DfrsCard'\r\nimport ModalContent from '../Components/ModalContent'\r\nimport moment from 'moment'\r\nimport PickerButton from 'antd/lib/date-picker/PickerButton';\r\nimport jsPDF from 'jspdf'\r\nimport 'jspdf-autotable'\r\nimport MapView from './tes'\r\nconst _ = require('lodash');\r\n\r\nconst doc = new jsPDF({\r\n  orientation: \"landscape\"\r\n})\r\n\r\nconst WsEndPoint = \"http://10.7.12.21:8000/service/WGService.asmx/\"\r\n\r\nclass MapApp extends React.Component {\r\n  static contextType = ContextType\r\n\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.mapRef = React.createRef()\r\n    this.state = {\r\n      isDrawerShow : false,\r\n      dfrsResult : [],\r\n      timedata : [],\r\n      showModal : false,\r\n      modalData : [],\r\n      isLoading : false,\r\n      dfrsPointGeom : [],\r\n      dfrsAreaGeom : null,\r\n      timeSelection : []\r\n    }\r\n\r\n    this.theme = {\r\n      dark : \"https://js.arcgis.com/4.16/esri/themes/dark/main.css\",\r\n      light : true,\r\n    }\r\n\r\n    this.f_fetchTimeDfrs()\r\n  }\r\n\r\n  //=============================================================\r\n  // FUNCTION\r\n  //=============================================================\r\n  f_showDrawer = (showed) => {\r\n    this.setState({\r\n      isDrawerShow : showed\r\n    })\r\n  }\r\n\r\n  f_dfrsFormOnFinish = (datamoment, type) => {\r\n    let whereCond, timeSelection\r\n    if(type == \"range-picker\"){\r\n      let startDate = datamoment[\"range-picker\"][0].format(\"YYYY-MM-DD\")\r\n      let endDate = datamoment[\"range-picker\"][1].format(\"YYYY-MM-DD\")\r\n      // whereCond = `end_date >= '${startDate}' and end_date <= '${endDate}'`\r\n      whereCond = `start_date >= date'${startDate}' and end_date <= date'${endDate}'`\r\n      timeSelection = [startDate, endDate]\r\n    }\r\n    else if(type == \"period\"){\r\n      let [start, end ] = datamoment[\"period-time\"].split(\"|\")\r\n      whereCond = `end_date >= date'${start}' and end_date <= date'${end}'`\r\n      // whereCond = `start_date >= '${start}' and end_date <= '${end}'`\r\n      timeSelection = [start, end]\r\n    }\r\n    else if(type == \"all\"){\r\n      whereCond = ``\r\n      timeSelection = []\r\n    }\r\n    else if(type == \"todate\"){\r\n      let [start, end] = this.f_getDatesRange(moment(\"20190215\"), moment())[0]\r\n      // console.log(\"TimeRange\", todate )\r\n      whereCond = `end_date >= date'${start}' and end_date <= date'${end}'`\r\n      timeSelection = [start, end]\r\n    }\r\n    this.setState({ timeSelection : timeSelection })\r\n\r\n    // FILTER UNTUK CARD SELECTION\r\n    let query =  this.layerDeforestationPoint.createQuery()\r\n    query.where = whereCond\r\n    // this.layerDeforestationPoint.queryFeatures(query).then(response => this.setState({ dfrsResult : response.features }) )\r\n    this.layerDeforestationArea.queryFeatures(query).then(response => this.setState({ dfrsResult : response.features }) )\r\n\r\n    // FILTER DEFORESTASI DI LAYER\r\n    this.layerDeforestationPoint.definitionExpression = whereCond\r\n    this.layerDeforestationPoint.visible = true\r\n  }\r\n\r\n  f_zoomTo = (f) => {\r\n    // console.log(lat, lon)\r\n    // console.log(\"that features\", f)\r\n    this.view.goTo({ target : f.geometry, tilt : 70})\r\n\r\n    // HIGHLIGHT\r\n    this.view.whenLayerView(this.layerDeforestationArea).then(\r\n      (layerview) => {\r\n        let query = this.layerDeforestationArea.createQuery()\r\n        query.where = `id = '${f.attributes.id}'`\r\n        this.layerDeforestationArea.queryFeatures(query).then(\r\n          result => {\r\n            console.log(\"rf\", result.features)\r\n            if(this.highlightArea){\r\n              this.highlightArea.remove()\r\n            }\r\n\r\n            this.highlightArea = layerview.highlight(result.features)\r\n\r\n          } \r\n        )\r\n      }\r\n    )\r\n\r\n    // this.view.center = [lon, lat]\r\n    // this.view.zoom = 13\r\n  }\r\n\r\n  f_fetchTimeDfrs = () => {\r\n    fetch(`https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/0/query?f=json&outFields=[start_date,end_date]&where=1=1&returnGeometry=false`)\r\n      .then(response => response.json() )\r\n      .then( data => this.setState({\r\n        timedata : data.features\r\n      }) )\r\n  }\r\n\r\n  f_clearBufferLayers = () => {\r\n    this.bufferLayer.removeAll()\r\n  }\r\n\r\n  f_getDatesRange(startdate, enddate){\r\n    let nextStartDate = startdate\r\n    let arr = []\r\n    while(nextStartDate <= enddate){\r\n      let start = nextStartDate.format()\r\n      let end = nextStartDate.add(13, 'days').format()\r\n      arr.push([ start, end ])\r\n      nextStartDate = nextStartDate.add(1, 'days')\r\n    }\r\n    return arr.reverse()\r\n  }\r\n\r\n  f_onClear = () => {\r\n    this.setState({ dfrsResult : [] })\r\n    this.layerDeforestationPoint.visible = false\r\n  }\r\n\r\n  f_hotspot = () => {\r\n    let column = ['start date', 'end date', 'lat', 'lon', 'conssesion', 'mangrove', 'other', 'total']\r\n    \r\n  }\r\n\r\n  f_downloadPdf = () => {\r\n    console.log(\"data to pdf\", this.state.dfrsResult)\r\n  }\r\n  //\r\n  // LIFECYCLE\r\n  //\r\n  componentDidMount() {\r\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/layers/VectorTileLayer', 'esri/widgets/BasemapGallery', 'esri/widgets/Expand', \"esri/widgets/LayerList\", \"esri/layers/FeatureLayer\", \"esri/layers/GroupLayer\", \"esri/Graphic\", \"esri/layers/GraphicsLayer\", \"esri/widgets/Legend\", \"esri/geometry/geometryEngine\", \"esri/core/watchUtils\", \"esri/widgets/DistanceMeasurement2D\", \"esri/tasks/support/Query\", \"esri/widgets/TimeSlider\", \"esri/widgets/Zoom\", \"esri/geometry/projection\", \"esri/geometry/SpatialReference\"], { css: this.theme.light }).then(\r\n      ([ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query, TimeSlider, Zoom, projection, SpatialReference]) => {\r\n        //===============================================================\r\n        // LOCAL COMPONENT\r\n        //===============================================================\r\n        // Table deskripsi pada popup information\r\n        const DescriptionTable = (props) => {\r\n          let [isTrace, setTrace] = useState(false)\r\n\r\n          let data = props.data\r\n\r\n          let detailDescription = []\r\n          for (var key of Object.keys(data)) {\r\n            detailDescription.push(<Descriptions.Item label={key} key={key} >{data[key]}</Descriptions.Item>)\r\n          }\r\n\r\n          // Function to draw spider map from POM to refinery\r\n          let f_traceData = (id, layername, lon, lat) => {\r\n            let url\r\n            if (layername === \"Refinery\") {\r\n              url = `${WsEndPoint}_GetPOMSupplier_?refinery=${id}`\r\n              this.layerPom.visible = true\r\n            } else if (layername === \"POM\") {\r\n              url = `${WsEndPoint}_GetRefinery_?pom=${id}`\r\n              this.layerRefinery.visible = true\r\n            }\r\n\r\n            fetch(url)\r\n              .then(response => response.json())\r\n              .then(resultData => {\r\n                // DRAW LINE\r\n                let lineSymbol = {\r\n                  type: 'simple-line',\r\n                  color: [226, 119, 40],\r\n                  width: 2\r\n                }\r\n\r\n                resultData.map(el => {\r\n                  let spiderLine = {\r\n                    type: \"polyline\",\r\n                    paths: [\r\n                      // [props.position.longitude, props.position.latitude],\r\n                      [lon, lat],\r\n                      [parseFloat(el.X_Coor), parseFloat(el.Y_Coor)]\r\n                    ]\r\n                  }\r\n\r\n                  let spiderLineGraphic = new Graphic({\r\n                    geometry: spiderLine,\r\n                    symbol: lineSymbol\r\n                  })\r\n\r\n                  this.view.graphics.add(spiderLineGraphic)\r\n                })\r\n              })\r\n              .then(() => setTrace(true))\r\n              .catch(error => console.log('error', error));\r\n\r\n          }\r\n\r\n          let f_clearGraphic = () => {\r\n            this.view.graphics.removeAll()\r\n            this.layerRefinery.visible = false\r\n            setTrace(false)\r\n          }\r\n\r\n          let f_button = () => {\r\n            switch (props.title) {\r\n              case \"POM\":\r\n                return isTrace ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.pomid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n              case \"Refinery\":\r\n                return isTrace == true ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.rfid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n            }\r\n          }\r\n\r\n          return (\r\n            <React.Fragment>\r\n              <Descriptions title={props.title} style={{ fontSize: '12px' }} bordered column={1} size=\"small\">\r\n                {detailDescription}\r\n              </Descriptions>\r\n              <Divider />\r\n              {f_button()}\r\n            </React.Fragment>\r\n          )\r\n        }\r\n\r\n        // Konten saat Deforestation point di klik\r\n        const DfrsPopupContent = (props) => {\r\n          console.log(\"props\", props)\r\n          this.layerPlantationArea.queryFeatures().then(r => console.log(\"conc area\", r))\r\n          const [inputValue, setInputValue] = useState(0)\r\n          const [pomInside, setPomInside] = useState([])\r\n          const [concInside, setConcInside] = useState([])\r\n          const layerOptions = [\r\n            { label : 'POM', value : this.layerPom, key:\"1\"  },\r\n            { label : 'Reffinery', value : this.layerRefinery, key:\"2\" },\r\n            { label : 'Concession Area', value : this.layerPlantationArea, key:\"3\" },\r\n            { label : 'Peatland', value : this.layerPeat, key:\"4\" },\r\n          ]\r\n\r\n          // let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n\r\n          const updateLayerVisibility = e => {\r\n            e.target.value.visible = e.target.checked\r\n            checkFeatureInside()\r\n          }\r\n\r\n          const onChange = value => { \r\n            setInputValue(value)\r\n            props.onSliderChange(value) \r\n            checkFeatureInside()\r\n          }\r\n\r\n          const checkFeatureInside = () => {\r\n            layerOptions.forEach( (el, i) => {\r\n              let layer = el.value\r\n              //POM SUPPLIER\r\n              if(layer.title == \"POM Supplier\"){\r\n                if(layer.visible){\r\n                  filterFeatureInside(layer).then(\r\n                    result => setPomInside(result.features)\r\n                  )\r\n                }\r\n                else{\r\n                  setPomInside([])\r\n                }\r\n              }\r\n              //KONSESI\r\n              else if(layer.title == \"Oil Palm Area\"){\r\n                if(layer.visible){\r\n                  filterFeatureInside(layer).then(\r\n                    async result => {\r\n                      // CALCULATE AREA\r\n                      let query = this.layerDeforestationArea.createQuery()\r\n                      query.where = `id = '${props.id}'`\r\n                      let dfFeatures = await this.layerDeforestationArea.queryFeatures(query)\r\n                      var concessionResult = await result.features.map(\r\n                        async feature => {\r\n                          let f = feature\r\n                          let area = await calculateArea(feature.geometry, dfFeatures.features[0].geometry)\r\n                          f.area = area.area\r\n                          f.intersectGeometry = area.geometry\r\n                          console.log(\"f\", f)\r\n                          return f\r\n                        }\r\n                      )\r\n\r\n                      Promise.all(concessionResult).then(\r\n                        value => setConcInside(value)\r\n                      )\r\n                    }\r\n                  )\r\n                }\r\n                else{\r\n                  setConcInside([])\r\n                }\r\n              }\r\n            })\r\n          }\r\n\r\n          const calculateArea = (geom1, geom2) => {\r\n            // console.log(\"g1g2\", geom1, geom2)\r\n            return projection.load().then(\r\n              () => {\r\n                let outSpatialReference = new SpatialReference({\r\n                  wkid: 3857 //Sphere_Sinusoidal projection\r\n                });\r\n                let g1 = projection.project(geom1, outSpatialReference)\r\n                let g2 = projection.project(geom2, outSpatialReference)\r\n                let isIntersect = geometryEngine.intersects(g1, g2)\r\n                if(isIntersect){\r\n                  // let intersectArea = geometryEngine.intersect(g1,g2)\r\n                  let intersectArea = geometryEngine.intersect(g2,g1)\r\n                  // let difference = geometryEngine.difference(g2, g1)\r\n                  console.log(\"intersect area\", intersectArea)\r\n                  // var area = geometryEngine.geodesicArea(intersectArea, \"hectares\")\r\n                  var area = { area : geometryEngine.geodesicArea(intersectArea, \"hectares\"), geometry : intersectArea }\r\n                }\r\n                else{\r\n                  var area = ''\r\n                }\r\n                return area\r\n              }\r\n            )\r\n\r\n          }\r\n\r\n          const filterFeatureInside = layer => {\r\n            let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n            // console.log('l', layer)\r\n            let filter = new Query()\r\n            filter.geometry = geom\r\n            filter.spatialRelationship = \"intersects\"\r\n            filter.returnGeometry = true\r\n            // let result = await layer.queryFeatures(filter)\r\n            // return await result\r\n            return layer.queryFeatures(filter)\r\n          }\r\n\r\n          const buttonOnClick = () => {\r\n            let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n            if(geom){\r\n\r\n              // Query untuk mencari area yang berintersect dengan area buffer\r\n              const query = new Query()\r\n              query.geometry = geom\r\n              query.spatialRelationship = \"intersects\"\r\n              query.returnGeometry = true\r\n              query.outFields = \"*\"\r\n              query.outSpatialReference = { wkid: 4326 };\r\n\r\n              // Query unntuk menyeleksi area deforestasi berdasarkan ID point\r\n              const query2 = new Query\r\n              query2.outFields = \"*\"\r\n              query2.returnGeometry = true\r\n              query2.where = `id = '${props.id}'`\r\n\r\n              const queryHotspot = new Query\r\n              queryHotspot.outFields = \"*\"\r\n              queryHotspot.geometry = geom\r\n              queryHotspot.returnGeometry = true\r\n              queryHotspot.spatialRelationship = \"intersects\"\r\n              queryHotspot.where = `Acq_Date between date'${moment( props.attributes.start_date ).format(\"YYYY-MM-DD\")}' and '${ moment(props.attributes.end_date).format(\"YYYY-MM-DD\")}'`\r\n\r\n              // Setelah berhasil di query hasil akan dikirim ke modal, untuk dianalisis apakah di geometry tersebut terdapat POI yang terimpact\r\n              this.layerDeforestationArea.queryFeatures(query2).then(\r\n                result => { \r\n                  this.setState({\r\n                    dfrsAreaGeom : result.features[0].geometry\r\n                  })\r\n                }\r\n              )\r\n              \r\n              // Mengaktifkan loading spinner\r\n              this.setState({ isLoading : true })\r\n\r\n              // Mengeksekusi Query sebelum dikirim ke Modal data2 apa saja yang terindikasi bersinggungan dengan area buffer yaitu layer pom, area plantation dan peat\r\n              Promise.all([this.layerPom.queryFeatures(query), this.layerPlantationArea.queryFeatures(query), this.layerPeat.queryFeatures(query), this.layerHotspot.queryFeatures(queryHotspot) ])\r\n                .then(result => {\r\n                  let featureSet = result.map( featureSet => featureSet.features )\r\n                  console.log(\"fs\", featureSet)\r\n                  this.setState({ modalData : featureSet})\r\n                })\r\n                // Menonaktifkan spinner dan menampilkan modal\r\n                .then( () => this.setState({showModal : true, isLoading : false}) )\r\n\r\n            }\r\n          }\r\n\r\n          const zoomToFeature = (geom, record ) => {\r\n            console.log(\"record\", record)\r\n            this.view.goTo({\r\n              target : geom,\r\n              tilt : 70\r\n            })\r\n          }\r\n\r\n          const zoomToIntersect = (geom) => {\r\n            this.layerIntersectPolygon.removeAll()\r\n            var simpleFillSymbol = {\r\n              type: \"simple-fill\",\r\n              color: [227, 139, 79, 0.8],  // orange, opacity 80%\r\n              outline: {\r\n                color: [255, 255, 255],\r\n                width: 1\r\n              }\r\n            };\r\n\r\n            let polygonGraphic = new Graphic({\r\n              geometry : geom,\r\n              symbol : simpleFillSymbol\r\n            })\r\n\r\n            this.layerIntersectPolygon.add(polygonGraphic)\r\n\r\n            this.view.goTo({\r\n              target : geom,\r\n              tilt : 70\r\n            })\r\n\r\n          }\r\n\r\n          const createList = (data, title) => {\r\n            console.log(\"data\", data)\r\n\r\n            // COLUMN FOR POM\r\n            const columns = [\r\n              {\r\n                title: 'Name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: text => <a>{text}</a>,\r\n              },\r\n              {\r\n                title: 'Action',\r\n                dataIndex: 'action',\r\n                key: 'action',\r\n                render : (geom, record) => {\r\n                  console.log(\"re\", record)\r\n                  return <Button onClick={() => zoomToFeature(geom.geometry, record) } >go to</Button>\r\n                }\r\n              },\r\n            ]\r\n\r\n            // COLUMN FOR CONCESSION\r\n            const concessionColumn =  [\r\n              {\r\n                title: 'Names',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: text => <a>{text}</a>,\r\n              },\r\n              {\r\n                title: 'Impacted Area',\r\n                dataIndex: 'area',\r\n                key: 'area',\r\n                render : area => isNaN(parseFloat(area).toFixed(3)) ? null : <span style={{color : 'red'}}>{parseFloat(area).toFixed(3)} Ha</span>\r\n              },\r\n              {\r\n                title: 'Action',\r\n                dataIndex: 'action',\r\n                key: 'action',\r\n                render : (geom, record) => {\r\n                  // console.log(\"re\", record)\r\n                  // return <Button onClick={() => zoomToFeature(geom.geometry, record) } >go to</Button>\r\n                  if( record.area === undefined ){\r\n                    return <Button onClick={() => zoomToFeature(geom.geometry, record) } >go to</Button>\r\n                  }\r\n                  else{\r\n                    return <Space>\r\n                      <Button onClick={() => zoomToFeature(geom.geometry, record) } >go to</Button>\r\n                      <Button onClick={() => zoomToIntersect (geom.intersectGeometry) } >impacted</Button>\r\n                    </Space>\r\n                  }\r\n                }\r\n              },\r\n            ]\r\n\r\n            const mapingField = {\r\n              \"POM\" : \"PomName\",\r\n              \"Concession\" : \"Name\",\r\n            }\r\n\r\n            function chooseColumn(){\r\n              if(title==\"POM\"){ return columns}\r\n              else if(title == \"Concession\"){ return concessionColumn}\r\n            }\r\n\r\n            if(data.length > 0){\r\n              console.log(data)\r\n              let tableData = data.map(el => { return { name : el.attributes[ mapingField[title] ], action : el, area : el.area, intersectGeometry : el.intersectGeometry } })\r\n              return(\r\n                <>\r\n                  <h1>{title}</h1>\r\n                  {\r\n                    <div style={{padding : '10px'}}>\r\n                      <Table columns={chooseColumn()} dataSource={tableData} size=\"small\" />\r\n                    </div>\r\n                  }\r\n                  <Divider />\r\n                </>\r\n              ) \r\n            }\r\n            else{\r\n              return null\r\n            }\r\n          }\r\n\r\n          const findIntersection = (searchPolygon, graphics) => {\r\n            return graphics.filter(graphic => geometryEngine.intersects(graphic.geometry, searchPolygon))\r\n          }\r\n\r\n          return(\r\n            <>\r\n            <Descriptions title=\"Detail\" column={1} bordered>\r\n              <Descriptions.Item label=\"Start\">{moment(props.attributes.start_date).format(\"DD/MM/YYYY\")}</Descriptions.Item>\r\n              <Descriptions.Item label=\"End\">{moment(props.attributes.end_date).format(\"DD/MM/YYYY\")}</Descriptions.Item>\r\n              <Descriptions.Item label=\"Total Area\">{props.attributes.total} ha</Descriptions.Item>\r\n            </Descriptions>\r\n              <Divider />\r\n              <h4>Buffer Radius in Kilometers</h4>\r\n              <div style={{position : 'relative'}}>\r\n                <Row>\r\n                  <Col span={17} >\r\n                    <Slider defaultValue={inputValue} max={50} value = { typeof inputValue ==='number'? inputValue : 0 }tooltipPlacement=\"bottom\" onChange={ onChange } />\r\n                  </Col>\r\n                  <Col span={2}>\r\n                    <InputNumber min={0} max={50} style={{ margin: '0 16px' }} value={inputValue} onChange={onChange} />\r\n                  </Col>\r\n                </Row>\r\n              \r\n              <Divider />\r\n              <h4>Show or hide layer</h4>\r\n              {\r\n                layerOptions.map( opt => <Checkbox key={opt.key} value={opt.value} onChange={updateLayerVisibility} >{ opt.label }</Checkbox>)\r\n              }\r\n              <Divider />\r\n              { createList(pomInside, \"POM\") }\r\n              { createList(concInside, \"Concession\") }\r\n              </div>\r\n              <div style={{position : 'sticky', bottom : '0px'}}>\r\n                <Space>\r\n                  <Button type=\"primary\" onClick={ buttonOnClick }>Show List</Button>\r\n                  {/* <Button type=\"primary\" onClick={()=>this.setState({showModal : true})} >Export to PDF</Button> */}\r\n                </Space>\r\n              </div>\r\n            </>\r\n          )\r\n        }\r\n\r\n        //===============================================================\r\n        // BASE FUNCTION\r\n        //===============================================================\r\n        // Fungsi untuk menggambar buffer\r\n        const updateBufferGraphic = ( geometry,size ) => {\r\n          let polySym = {\r\n            type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\r\n            color: [140, 140, 222, 0.5],\r\n            outline: {\r\n              color: [0, 0, 0, 0.5],\r\n              width: 2\r\n            }\r\n          };\r\n          if (size > 0){\r\n            var bufferGeometry = geometryEngine.geodesicBuffer( geometry, size, \"kilometers\")\r\n            if(this.bufferLayer.graphics.length === 0){\r\n              this.bufferLayer.add(\r\n                new Graphic({\r\n                  geometry : bufferGeometry,\r\n                  symbol : polySym\r\n                })\r\n              )\r\n            } else {\r\n              this.bufferLayer.graphics.getItemAt(0).geometry = bufferGeometry\r\n            }\r\n          } else{\r\n            this.bufferLayer.removeAll()\r\n          }\r\n        }\r\n\r\n        // Generate isi dari popup\r\n        const generateContent = (target, title) => {\r\n          console.log(target, title)\r\n          \r\n          let popupDiv = document.createElement('div')\r\n\r\n          if(title === \"POM\"){\r\n            pomPopupTemplate.content = popupDiv\r\n            ReactDOM.render(<DescriptionTable data={target.graphic.attributes} title={title} position={{ latitude: target.graphic.geometry.latitude, longitude: target.graphic.geometry.longitude }} />, popupDiv)\r\n          } \r\n          else if (title === \"Deforestation Point\" || title === \"Deforestation Area\"){\r\n            dpPopupTemplate.content = popupDiv\r\n\r\n            //// IF value on slider are changing, the buffer size will be automatic adjusting to that value\r\n            const onSliderChange = (bufferSize) => {\r\n\r\n              //// Buffer is calculated from centered point\r\n              // let pointGeometry = target.graphic.geometry\r\n              let pointGeometry = target.graphic.geometry\r\n              this.setState({\r\n                dfrsPointGeom : pointGeometry\r\n              })\r\n              updateBufferGraphic(pointGeometry, bufferSize)\r\n            }\r\n\r\n            const onCheckboxChange = layerList => {\r\n              layerList.map( layer => {\r\n                layer.visible = true\r\n              })\r\n            }\r\n\r\n            ReactDOM.render(<DfrsPopupContent id={target.graphic.attributes.id} onSliderChange={onSliderChange} attributes={ target.graphic.attributes } />, popupDiv)\r\n          }\r\n          else{\r\n            pomPopupTemplate.content = popupDiv\r\n            ReactDOM.render(<DescriptionTable data={target.graphic.attributes} title={title} position={{ latitude: target.graphic.geometry.latitude, longitude: target.graphic.geometry.longitude }} />, popupDiv)\r\n          }\r\n\r\n          return popupDiv\r\n        }\r\n\r\n        //===============================================================\r\n        // DOM\r\n        //===============================================================\r\n        // document.getElementById(\"button-form-deforestation\").addEventListener('click', function(e){\r\n        //   console.log(e)\r\n        // })\r\n\r\n        //===============================================================\r\n        // MAP INIT\r\n        //===============================================================\r\n        this.map = new ArcGISMap({\r\n          basemap: 'streets-night-vector'\r\n        });\r\n\r\n        //===============================================================\r\n        // VIEW INIT\r\n        //===============================================================\r\n        this.view = new MapView({\r\n          container: this.mapRef.current,\r\n          map: this.map,\r\n          center: [118, 0],\r\n          zoom: 4,\r\n          popup: {\r\n            dockEnabled: true,\r\n            dockOptions: {\r\n              // Disables the dock button from the popup\r\n              buttonEnabled: false,\r\n              // Ignore the default sizes that trigger responsive docking\r\n              breakpoint: false,\r\n              position : 'top-left'\r\n            }\r\n          }\r\n        });\r\n\r\n        // this.view.when(\r\n        //   () => {\r\n        //     console.log(\"sukses\", this.view) },\r\n        //   function(err){console.log(err)}\r\n        // )\r\n\r\n        //==============================================================\r\n        // LAYER\r\n        //==============================================================\r\n        \r\n        // GROUP PLANTATION\r\n        //\r\n        this.layerPlantationPoint = new FeatureLayer({\r\n          // url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/0\",\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/OilPalm_Plantation_TP_Supplier/MapServer/0\",\r\n          title: \"Oil Palm Plantation\",\r\n          visible: false,\r\n          outFields : ['*']\r\n        });\r\n\r\n        this.layerPlantationArea = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/2\",\r\n          title: \"Oil Palm Area\",\r\n          visible: false,\r\n          outFields : ['*']\r\n        });\r\n\r\n        this.layerPeat = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Layer_Fungsi_Ekosistem_Gambut_201907_sde/MapServer/0\",\r\n          title : \"Peat Ecosystem\",\r\n          visible : false,\r\n          outFields : ['*']\r\n        })\r\n        \r\n        // GROUP INDUSTRIES\r\n        //\r\n        this.layerPkCrushing = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/industries_MIL1/MapServer/0\",\r\n          title: \"3rd PK Crushing\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerRefinery = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Layer_Refinery_201908_sde/MapServer/0\",\r\n          title: \"Refinery\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['*']\r\n        });\r\n\r\n        this.layerPom = new FeatureLayer({\r\n          // url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/1\",\r\n          // url: \"https://gisportal.wilmar.co.id/arcgisserver/rest/services/NewGISInteractiveMap_2/POM/MapServer/1\",\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier_2020/MapServer/1\",\r\n          title: \"3rd Party Mill\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['pomid', 'PomName', 'CompanyNam', 'PlaceName', 'Tankcap', 'Silocap']\r\n        });\r\n        // this.layerPom = importedLayer.layerPom\r\n\r\n        // GROUP DEFORESTATION\r\n        //\r\n        this.layerDeforestationPoint = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/0\",\r\n          title : \"Deforestation Point\",\r\n          visible : false,\r\n          popupEnabled: true,\r\n          outFields : ['*']\r\n        });\r\n        this.map.add(this.layerDeforestationPoint)\r\n\r\n        this.layerDeforestationArea = new FeatureLayer({\r\n          // url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/1\",\r\n          url : \"https://gisportal.wilmar.co.id/arcgisserver/rest/services/third_party/deforestation_builder/MapServer/0\",\r\n          title : \"Deforestation Area\",\r\n          visible : false,\r\n          outFields : ['*']\r\n        });\r\n\r\n        // Basemap WILMAR\r\n        //\r\n        var basemapWilmar = new VectorTileLayer({\r\n          url: 'https://gisportal.wilmar.co.id/arcgisserver/rest/services/Hosted/Wilmar_Basemap2/VectorTileServer?f=pjson'\r\n        });\r\n\r\n        // HOTSPOT\r\n        this.layerHotspot = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Hotspot_HSP1/MapServer/0\",\r\n          title : \"Hotspot\",\r\n          visible : false,\r\n          outFields : ['*']\r\n        })\r\n        this.map.add(this.layerHotspot)\r\n\r\n        // SKETCH LAYER\r\n        //\r\n        this.sketchLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        this.bufferLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        this.map.addMany([this.sketchLayer, this.bufferLayer])\r\n\r\n        // LAYER GROUPING\r\n        //\r\n        var glIndustries = new GroupLayer({\r\n          title: \"Wilmar Third Party\"\r\n        });\r\n\r\n        var glPlantation = new GroupLayer({\r\n          title : \"Plantation\"\r\n        });\r\n\r\n        var glDeforestation = new GroupLayer({\r\n          title : \"Deforestation\"\r\n        })\r\n\r\n        var glLandIssue = new GroupLayer({\r\n          title : \"Land Issue\"\r\n        })\r\n\r\n        glIndustries.addMany([ this.layerRefinery, this.layerPom, this.layerPkCrushing, this.layerPlantationArea, this.layerPlantationPoint, ]);\r\n        // glPlantation.addMany([ this.layerPlantationArea, this.layerPlantationPoint, ])\r\n        glDeforestation.addMany([ this.layerDeforestationArea, this.layerDeforestationPoint,  ])\r\n        glLandIssue.addMany([this.layerPeat])\r\n        this.map.addMany([ glIndustries, glDeforestation, glLandIssue]);\r\n\r\n        //// LAYER INTERSECT POLYGON\r\n        this.layerIntersectPolygon = new GraphicsLayer({\r\n          title : \"intersected\"\r\n        })\r\n        this.map.add(this.layerIntersectPolygon)\r\n\r\n        //=================================================================\r\n        // WIDGET\r\n        //=================================================================\r\n        \r\n        // ZOOM\r\n        var zoomWidget = new Zoom({\r\n          view : this.view\r\n        })\r\n        this.view.ui.components = []\r\n        this.view.ui.add(zoomWidget, \"top-right\");\r\n\r\n        // this.view.whenLayerView(this.layerPom).then((lv)=> console.log(\"lv\",lv))\r\n        // BASEMAP GALERY\r\n        //\r\n        var basemapGallery = new BasemapGallery({\r\n          view: this.view\r\n        });\r\n        var expand = new Expand({\r\n          view: this.view,\r\n          content: basemapGallery,\r\n          expandTooltip: 'Change Basemap'\r\n        });\r\n        this.view.ui.add(expand, \"top-right\");\r\n\r\n        // LAYERLIST\r\n        //\r\n        var layerList = new LayerList({\r\n          view: this.view,\r\n        })\r\n        var expandLayerList = new Expand({\r\n          view: this.view,\r\n          content: layerList,\r\n          expandTooltip: 'Layer List'\r\n        })\r\n        this.view.ui.add(expandLayerList, \"top-right\")\r\n\r\n        // LEGEND\r\n        //\r\n        var legend = new Legend({\r\n          view : this.view,\r\n        })\r\n        this.view.ui.add(legend, \"bottom-right\")\r\n\r\n        //\r\n        //// TIMESLIDER\r\n        //\r\n        const timeSlider = new TimeSlider({\r\n          container: \"timeSlider\",\r\n          playRate: 50,\r\n          stops: {\r\n            interval: {\r\n              value: 1,\r\n              unit: \"hours\"\r\n            }\r\n          }\r\n        });\r\n        // this.view.ui.add(timeSlider, \"manual\");\r\n\r\n        //=================================================================\r\n        //POPUP SET\r\n        //=================================================================\r\n        let pomPopupTemplate = {\r\n          title: 'POM Suplier',\r\n          content: (target) => generateContent(target, \"POM\")\r\n        }\r\n        this.layerPom.popupTemplate = pomPopupTemplate\r\n\r\n        let refineryPopupTemplate = {\r\n          title: 'Refinery',\r\n          content: (target) => generateContent(target, \"Refinery\")\r\n        }\r\n        this.layerRefinery.popupTemplate = refineryPopupTemplate\r\n\r\n        let concAreaTemplate = {\r\n          title : \"Concession Area\",\r\n          content : target => generateContent(target, \"Concession Area\")\r\n        }\r\n        this.layerPlantationArea.popupTemplate = concAreaTemplate\r\n\r\n        let hsTemplate = {\r\n          title : \"Hotspot\",\r\n          content : target => generateContent(target, \"Hotspot\")\r\n        }\r\n        this.layerHotspot.popupTemplate = hsTemplate\r\n\r\n        let dpPopupTemplate = {\r\n          title : 'Deforestation Point',\r\n          content : target => generateContent(target, \"Deforestation Point\")\r\n        }\r\n        this.layerDeforestationPoint.popupTemplate = dpPopupTemplate \r\n\r\n        let daPopupTemplate = {\r\n          title : 'Deforestation Area',\r\n          content : target => generateContent(target, \"Deforestation Area\")\r\n        }\r\n        this.layerDeforestationArea.popupTemplate = daPopupTemplate\r\n\r\n        //==================================================================\r\n        // EVENT\r\n        //==================================================================\r\n        this.view.when(\r\n          () => this.view.whenLayerView(this.layerIntersectPolygon)\r\n            .then(\r\n              layerview1 => {\r\n                this.view.on(\"pointer-move\", evt => {\r\n                  if( this.layerIntersectPolygon.graphics.getItemAt(0) !== undefined ){\r\n                    var screenPoint = { x : evt.x, y : evt.y }\r\n                    this.view.hitTest(screenPoint).then( response => {\r\n                      response.results.forEach( el => {\r\n                        if (el.graphic.layer.title == 'intersected'){\r\n                          console.log(\"elelee\", el)\r\n                        }\r\n                      })\r\n                    })\r\n                  }\r\n                })\r\n              }\r\n            )\r\n        )\r\n\r\n        watchUtils.whenTrue(this.view, \"stationary\", () => {\r\n          if(this.view.zoom >= 10){\r\n            console.log(this.view.zoom)\r\n            this.layerDeforestationArea.visible = this.layerDeforestationPoint.visible ? true : false \r\n          }\r\n          else{\r\n            this.layerDeforestationArea.visible = false\r\n          }\r\n        })\r\n      });\r\n\r\n\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // console.log(this.context)\r\n    // this.layerPlantationPoint.visible = true\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.view) {\r\n      this.view.container = null\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let dfrsContent\r\n    if(this.state.dfrsResult == null){\r\n      dfrsContent = <Result title=\"Please choose date range\" />\r\n    }\r\n    else if(this.state.dfrsResult.length == 0){\r\n      dfrsContent = <Empty />\r\n    } \r\n    else {\r\n      let content = []\r\n      const impactedId = ['IDN_w0tv4g7_20200908', 'IDN_w0tv675_20200908', 'IDN_w0tv5sw_20200908', 'IDN_w0sxfr1_20200901', '\tIDN_w0u8138_20200906']\r\n      this.state.dfrsResult.map( (features, index) => {\r\n\r\n        let obj = {\r\n          key : index,\r\n          lat : features.attributes.POINT_X,\r\n          lon : features.attributes.POINT_Y,\r\n          startdate : features.attributes.start_date,\r\n          enddate : features.attributes.end_date,\r\n          peatland : features.attributes.peatland,\r\n          mangrove : features.attributes.mangrove,\r\n          other : features.attributes.other,\r\n          total : features.attributes.total,\r\n          // zoomTo : ()=>this.f_zoomTo(features.attributes.POINT_Y, features.attributes.POINT_X, features),\r\n          zoomTo : ()=>this.f_zoomTo(features),\r\n          impacted : impactedId.includes(features.attributes.id) ? true : false\r\n        }\r\n\r\n        let sorter = impactedId.includes(features.attributes.id) ? 1 : 0\r\n        content.push({sorter : sorter, data : obj})\r\n\r\n      })\r\n\r\n      let c = _.orderBy(content, ['sorter'], ['desc'])\r\n      console.log(c)\r\n      let d = _.map(c, function(el, i){\r\n        let dat = {...el.data, index : i + 1}\r\n\r\n        return <DfrsCard key={dat.key} lat={dat.lat} lon={dat.lon} startdate={dat.startdate} enddate={dat.enddate} peatland={dat.peatland} mangrove={dat.mangrove} other={dat.other} total={dat.total} index={dat.index} zoomTo={dat.zoomTo} impacted={dat.impacted} />\r\n      })\r\n\r\n        dfrsContent = <Space direction=\"vertical\">{d}</Space>\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"webmap\" ref={this.mapRef} />\r\n        <div className=\"spinner\">\r\n          <Spin spinning={this.state.isLoading} size=\"large\" tip=\"Loading...\" />\r\n        </div>\r\n        {/* <div id=\"timeSlider\"></div> */}\r\n        <ButtonNotif onClick={ ()=>this.f_showDrawer(true) } count={4} />\r\n        <ButtonClear onClick={ this.f_clearBufferLayers }  />\r\n        <ButtonFire className=\"button-hotspot\" onClick={ () => this.layerHotspot.visible = ! this.layerHotspot.visible } />\r\n        <Drawer\r\n          title=\"Deforestation\"\r\n          placement=\"right\"\r\n          closable={true}\r\n          onClose={ () => this.f_showDrawer(false) }\r\n          visible={this.state.isDrawerShow}\r\n          width={500}\r\n        >\r\n          <DeforestationForm timesRange={this.f_getDatesRange(moment(\"20190215\"), moment())} onFinish={this.f_dfrsFormOnFinish} onClear={this.f_onClear} />\r\n          <Divider />\r\n          {\r\n            this.state.dfrsResult.length > 0 ? <Button onClick={this.f_downloadPdf} block>Download PDF</Button> : null\r\n          }\r\n          <Divider />\r\n          <div style={{display : 'flex', flexDirection : 'column', justifyContent : 'space-between'}}>\r\n            {dfrsContent}\r\n          </div>\r\n        </Drawer>\r\n        <Modal\r\n          title=\"Detail\"\r\n          visible={this.state.showModal}\r\n          onOk={(e)=>this.setState({showModal : false})}\r\n          onCancel={(e)=>this.setState({showModal : false})}\r\n          width=\"80vw\"\r\n          destroyOnClose={true}\r\n        >\r\n          <ModalContent data={this.state.modalData} location={this.state.dfrsPointGeom} dfrsArea={this.state.dfrsAreaGeom} />\r\n        </Modal>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapApp","import { loadModules } from 'esri-loader'\r\n\r\nexport default loadModules(['esri/Map', 'esri/views/MapView', 'esri/layers/VectorTileLayer', 'esri/widgets/BasemapGallery', 'esri/widgets/Expand', \"esri/widgets/LayerList\", \"esri/layers/FeatureLayer\", \"esri/layers/GroupLayer\", \"esri/Graphic\", \"esri/layers/GraphicsLayer\", \"esri/widgets/Legend\", \"esri/geometry/geometryEngine\", \"esri/core/watchUtils\", \"esri/widgets/DistanceMeasurement2D\", \"esri/tasks/support/Query\", \"esri/widgets/TimeSlider\", \"esri/widgets/Zoom\", \"esri/geometry/projection\", \"esri/geometry/SpatialReference\"], { css: true }).then(\r\n  ([ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query, TimeSlider, Zoom, projection, SpatialReference]) => {\r\n    return [ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query, TimeSlider, Zoom, projection, SpatialReference]\r\n  })\r\n\r\n\r\n\r\n\r\n\r\n// export await [ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query, TimeSlider, Zoom, projection, SpatialReference]\r\n\r\n// .then(\r\n//   ([ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query, TimeSlider, Zoom, projection, SpatialReference]) => {","import React from 'react'\r\nimport {Statistic} from 'antd'\r\n\r\nconst TotalTitle = (props) => {\r\n  return(\r\n    // <Statistic value={props.value} valueStyle={{fontSize : '15vh'}} />\r\n    <Statistic value={props.value} />\r\n  )\r\n}\r\n\r\nexport default TotalTitle","import React, { PureComponent } from 'react';\r\nimport {\r\n  PieChart, Pie, Legend, Tooltip, Cell\r\n} from 'recharts';\r\n\r\nconst data01 = [\r\n  { name: 'Have Plantation', value: 310 }, { name: 'Not have Plantation', value: 190 },\r\n];\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042']\r\n\r\nexport default class Example extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/k9jkog04/';\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <PieChart width={400} height={400}>\r\n        <Pie dataKey=\"value\" isAnimationActive={false} data={data01} cx={200} cy={200} outerRadius={100} fill=\"#8884d8\" innerRadius={60} label >\r\n          {\r\n          \tdata01.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)\r\n          }\r\n        </Pie>\r\n        <Tooltip />\r\n      </PieChart>\r\n    </>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  PieChart, Pie, Legend, Tooltip, Cell\r\n} from 'recharts';\r\n\r\nconst data01 = [\r\n  { name: 'Peat Area', value: 290 }, { name: 'Peat Loss', value: 10 },\r\n];\r\n\r\nconst COLORS = ['#FFBB28', '#FF8042']\r\n\r\nexport default class Example extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/k9jkog04/';\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <PieChart width={400} height={400}>\r\n        <Pie dataKey=\"value\" isAnimationActive={false} data={data01} cx={200} cy={200} outerRadius={100} fill=\"#8884d8\" innerRadius={60} label >\r\n          {\r\n          \tdata01.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)\r\n          }\r\n        </Pie>\r\n        <Tooltip />\r\n      </PieChart>\r\n    </>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\r\n} from 'recharts';\r\n\r\nconst data = [\r\n  {\r\n    name: 'Jan', area: 1.2,\r\n  },\r\n  {\r\n    name: 'Feb', area: 2.2,\r\n  },\r\n  {\r\n    name: 'Mar', area: 3.2,\r\n  },\r\n  {\r\n    name: 'Apr', area: 2.9,\r\n  },\r\n  {\r\n    name: 'May', area: 2.2,\r\n  },\r\n  {\r\n    name: 'June', area: 1.9,\r\n  },\r\n  {\r\n    name: 'Jul', area: 2.0,\r\n  },\r\n  {\r\n    name: 'Aug', area: 0.5,\r\n  },\r\n  {\r\n    name: 'Sep', area: 0.6,\r\n  },\r\n  {\r\n    name: 'Oct', area: 0.2,\r\n  },\r\n  {\r\n    name: 'Nov', area: 1.1,\r\n  },\r\n  {\r\n    name: 'Dec', area: 1.3,\r\n  },\r\n];\r\n\r\nexport default class AreaCharts extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      {/* <span className=\"title\" >Deforestation by Month</span> */}\r\n      <AreaChart\r\n        width={900}\r\n        height={100}\r\n        data={data}\r\n        margin={{\r\n          top: 20, left: 20, bottom: 20, right : 20\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Area type=\"monotone\" dataKey=\"area\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n      </AreaChart>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport {Row, Col, Card, Space} from 'antd'\r\nimport TotalTitle from '../Components/Charts/TotalTitle'\r\nimport DoughnoutCharts from '../Components/Charts/DoughnoutCharts' \r\nimport PeatCharts from '../Components/Charts/PeatCharts' \r\nimport AreaCharts from '../Components/Charts/AreaCharts' \r\n\r\nclass Dashboard extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"dashboard-wrapper\">\r\n        <Row>\r\n          <Col span={8}>\r\n            <div style={{height : '45vh'}}>\r\n                <Card title=\"Total Cover Loss(Ha)\" style={{height : '50%'}}>\r\n                  <TotalTitle value={12000} />\r\n                </Card>\r\n                <Card title=\"Total Cover Loss(Ha)\" style={{height : '50%'}}>\r\n                  <TotalTitle value={12000} />\r\n                </Card>\r\n            </div>\r\n          </Col>\r\n          <Col span={16}>\r\n            <div style={{height : '45vh'}}>\r\n              <Card title = \"Deforestation by Month\" style={{height : '100%'}}>\r\n                <AreaCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row style={{height : '45vh'}}>\r\n          <Col span={8}>\r\n            <div style={{maxHeight : '45vh'}}>\r\n              <Card title=\"Concession Ratio\" style={{height : '100%'}} >\r\n                <DoughnoutCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n          <Col span={8}>\r\n            <div style={{maxHeight : '50vh'}}>\r\n              <Card title=\"Concession Ratio\" style={{height : '100%'}} >\r\n                <DoughnoutCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n          <Col span={8}>\r\n            <div style={{maxHeight : '50vh'}}>\r\n              <Card title=\"Concession Ratio\" style={{height : '100%'}} >\r\n                <DoughnoutCharts />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Dashboard","import React from 'react';\r\nimport ButtonNotif from './Components/ButtonNotif';\r\nimport Sidebar from './Containers/Sidebar'\r\nimport MapApp from './Containers/MapApp'\r\nimport Dashboard from './Containers/Dashboard'\r\nimport { ContextProvider, Consumer } from './Config/context'\r\nimport { Layout } from 'antd';\r\nimport './App.css';\r\n\r\nconst { Content } = Layout\r\n\r\nfunction App() {\r\n  return (\r\n    <ContextProvider>\r\n      <Layout style={{ minHeight: '100vh' }}>\r\n        <Sidebar />\r\n        <Layout className=\"site-layout\">\r\n          <Content style={{ margin: '0 0px' }}>\r\n            <div className=\"site-layout-background\" style={{ minHeight: '100vh' }}>\r\n              <Consumer>\r\n                {\r\n                  context => {\r\n                    if(context.activePage == 'dashboard') {\r\n                      return <Dashboard />\r\n                    } \r\n                    else if(context.activePage == 'map') {\r\n                      return <MapApp />\r\n                    }\r\n                  }\r\n                }\r\n              </Consumer>\r\n              {/* <MapApp /> */}\r\n            </div>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    </ContextProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}