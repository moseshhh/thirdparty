{"version":3,"sources":["Context.jsx","Components/DeforestationForm.jsx","Components/ButtonNotif.jsx","Containers/Sidebar.jsx","Components/ButtonClear.jsx","Components/ButtonFire.jsx","Components/DfrsCard.jsx","Components/ModalContent.jsx","Containers/MapApp.jsx","App.js","serviceWorker.js","index.js"],"names":["ContextType","React","createContext","Provider","ContextProvider","Consumer","state","dfrsFormData","f_setDfrsFormData","data","setState","value","this","props","children","Component","formItemLayout","labelCol","xs","span","sm","wrapperCol","wrapperStyle","offset","DeforestationForm","useState","isTimeRangeDisable","setTimeRangeDisabled","isPeriodDisable","setPeriodDisabled","activeRadio","setActiveRadio","timesRange","name","onFinish","e","Group","onChange","target","Item","label","RangePicker","format","disabled","placeholder","map","el","i","start","end","Option","key","moment","type","htmlType","id","onClick","onClear","ButtonNotif","visible","setVisible","Fragment","className","count","shape","size","NotificationFilled","title","placement","closable","onClose","width","Sidebar","Menu","SubMenu","collapsed","Sider","theme","defaultSelectedKeys","mode","icon","PieChartOutlined","FileOutlined","ButtonClear","ClearOutlined","ButtonFire","danger","FireFilled","DfrsCard","index","extra","zoomTo","layout","lat","lon","Date","startdate","enddate","peatland","mangrove","other","total","ModalContent","pomData","setPomData","concData","setConcData","peatData","setPeatData","hotspotData","setHotspotData","dfrsLoc","latitude","location","longitude","useEffect","loadModules","then","geometryEngine","projection","SpatialReference","arrayPom","arrayConc","arrayPeat","arrayHotspot","console","log","dataPom","endLoc","geometry","jarak","getDistance","status","no","attributes","PomName","distance","distanceNumber","sort","a","b","dataHotspot","acq_date","Loc_Date","Latitude","Longitude","verification","Verificati","dataConc","load","outSpatialReference","wkid","g1","project","dfrsArea","g2","j","Name","area","toFixed","dataPeat","remark","Category","Promise","all","konsesi","peat","columnsPom","dataIndex","sorter","localeCompare","sortDirections","render","color","columnsConc","style","height","overflow","paddingLeft","paddingRight","dataSource","columns","WsEndPoint","MapApp","context","f_showDrawer","showed","isDrawerShow","f_dfrsFormOnFinish","datamoment","whereCond","timeSelection","startDate","endDate","split","query","layerDeforestationPoint","createQuery","where","queryFeatures","response","dfrsResult","features","definitionExpression","f_zoomTo","view","center","zoom","f_fetchTimeDfrs","fetch","json","timedata","f_clearBufferLayers","bufferLayer","removeAll","f_onClear","f_hotspot","mapRef","createRef","showModal","modalData","isLoading","dfrsPointGeom","dfrsAreaGeom","dark","light","nextStartDate","arr","add","push","reverse","css","ArcGISMap","MapView","VectorTileLayer","BasemapGallery","Expand","LayerList","FeatureLayer","GroupLayer","Graphic","GraphicsLayer","Legend","watchUtils","Query","TimeSlider","DescriptionTable","isTrace","setTrace","detailDescription","Object","keys","f_traceData","layername","url","layerPom","layerRefinery","resultData","lineSymbol","spiderLine","paths","parseFloat","X_Coor","Y_Coor","spiderLineGraphic","symbol","graphics","catch","error","f_clearGraphic","fontSize","bordered","column","pomid","position","rfid","f_button","DfrsPopupContent","inputValue","setInputValue","layerOptions","layerPlantationArea","layerPeat","updateLayerVisibility","checked","onSliderChange","defaultValue","max","tooltipPlacement","min","margin","opt","geom","undefined","getItemAt","spatialRelationship","returnGeometry","outFields","query2","queryHotspot","start_date","end_date","layerDeforestationArea","result","layerHotspot","featureSet","generateContent","popupDiv","document","createElement","pomPopupTemplate","content","ReactDOM","graphic","dpPopupTemplate","bufferSize","pointGeometry","bufferGeometry","geodesicBuffer","length","outline","updateBufferGraphic","basemap","container","current","when","err","layerPlantationPoint","layerPkCrushing","popupEnabled","sketchLayer","listMode","addMany","glIndustries","glPlantation","glDeforestation","basemapGallery","expand","expandTooltip","ui","layerList","expandLayerList","legend","playRate","stops","interval","unit","popupTemplate","refineryPopupTemplate","whenTrue","dfrsContent","POINT_X","POINT_Y","direction","ref","spinning","tip","f_getDatesRange","display","flexDirection","justifyContent","onOk","onCancel","contextType","Content","Layout","App","minHeight","Boolean","window","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1c95455f.chunk.js","sourcesContent":["import React from 'react'\r\nlet ContextType\r\nconst { Provider, Consumer } = (ContextType = React.createContext())\r\n\r\nclass ContextProvider extends React.Component {\r\n  state = {\r\n    dfrsFormData: {}\r\n  }\r\n\r\n  f_setDfrsFormData = (data) => {\r\n    this.setState({\r\n      dfrsFormData : data\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider value={{\r\n        ...this.state,\r\n        f_setDfrsFormData : this.f_setDfrsFormData\r\n      }}>\r\n        {this.props.children}\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport { ContextProvider, Consumer, ContextType }","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Consumer } from '../Context'\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form, Space, Select, Checkbox, Radio } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport { propTypes } from 'react-bootstrap/esm/Image';\r\nimport moment from 'moment'\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n}\r\n\r\nconst wrapperStyle = {\r\n  xs: {\r\n    span: 24,\r\n    offset: 0,\r\n  },\r\n  sm: {\r\n    span: 16,\r\n    offset: 8,\r\n  },\r\n}\r\n\r\nconst DeforestationForm = (props) => {\r\n  const [isTimeRangeDisable, setTimeRangeDisabled ] = useState(false)\r\n  const [isPeriodDisable, setPeriodDisabled ] = useState(true)\r\n  const [activeRadio, setActiveRadio] = useState('range-picker')\r\n\r\n  const onRadioChange = e => {\r\n    setActiveRadio(e.target.value)\r\n    if(e.target.value == \"period\"){\r\n      setPeriodDisabled(false)\r\n        setTimeRangeDisabled(true)\r\n    }\r\n    else if(e.target.value == \"range-picker\"){\r\n      setPeriodDisabled(true)\r\n        setTimeRangeDisabled(false)\r\n    }\r\n    else if(e.target.value == \"all\"){\r\n      setPeriodDisabled(true)\r\n      setTimeRangeDisabled(true)\r\n    }\r\n  }\r\n\r\n  function getDatesRange(startdate, enddate){\r\n    let nextStartDate = startdate\r\n    let arr = []\r\n    while(nextStartDate <= enddate){\r\n      let start = nextStartDate.format()\r\n      let end = nextStartDate.add(13, 'days').format()\r\n      arr.push([ start, end ])\r\n      nextStartDate = nextStartDate.add(1, 'days')\r\n    }\r\n    return arr.reverse()\r\n  }\r\n\r\n  // let timesRange =  getDatesRange(moment(\"20190215\"), moment())\r\n  let timesRange = props.timesRange\r\n\r\n  return (\r\n    <Form name=\"deforestation_control\" {...formItemLayout} onFinish={ (e) => props.onFinish(e, activeRadio) } >\r\n      <Radio.Group onChange={ onRadioChange } value={activeRadio}>\r\n        <Radio value=\"range-picker\">Time Range</Radio>\r\n        <Radio value=\"period\">Time Period</Radio>\r\n        <Radio value=\"all\">Select All</Radio>\r\n      </Radio.Group>\r\n      <Divider />\r\n      <Form.Item name=\"range-picker\" label=\"Time Range\">\r\n          <DatePicker.RangePicker format=\"YYYY/MM/DD\" disabled={isTimeRangeDisable} />\r\n      </Form.Item>\r\n      <Divider>Or</Divider>\r\n      <Form.Item name=\"period-time\" label=\"Period Time\">\r\n        <Select placeholder=\"select time period\" disabled={isPeriodDisable}>\r\n          {\r\n            timesRange.map( (el, i) => {\r\n              let [start, end] = el\r\n              return (<Select.Option key={i} value={ `${ moment(start).format(\"YYYY-MM-DD\") }|${ moment( end ).format(\"YYYY-MM-DD\") }`}>\r\n                { moment( start ).format(\"MMM Do YYYY\")} - { moment( end ).format(\"MMM Do YYYY\")}\r\n              </ Select.Option> )\r\n            })\r\n          }\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item wrapperCol={wrapperStyle} >\r\n        <Space>\r\n          <Button type=\"primary\" htmlType=\"submit\" id=\"button-form-deforestation\">Submit</Button>\r\n          <Button type=\"primary\" onClick={props.onClear} >Clear</Button>\r\n        </Space>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default DeforestationForm","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport DeforestationForm from './DeforestationForm'\r\n\r\nlet ButtonNotif = (props) => {\r\n  let [visible, setVisible] = useState(false)\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"button-notif\">\r\n        <Badge count={props.count}>\r\n          {/* <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={showDrawer} > */}\r\n          <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={props.onClick} >\r\n            <NotificationFilled />\r\n          </Button>\r\n        </Badge>\r\n      </div>\r\n      <Drawer\r\n        title=\"Deforestation\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={500}\r\n      >\r\n        {/* <DeforestationForm onFinish={(data) => console.log(\"halo\", data)} /> */}\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ButtonNotif","import React, { useState } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n} from '@ant-design/icons';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nlet Sidebar = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true)\r\n\r\n  return (\r\n    <Layout.Sider collapsed={collapsed}>\r\n      <div className=\"logo\" />\r\n      <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n        <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\r\n          Maps\r\n        </Menu.Item>\r\n        {/* <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"User\">\r\n          <Menu.Item key=\"3\">Tom</Menu.Item>\r\n          <Menu.Item key=\"4\">Bill</Menu.Item>\r\n          <Menu.Item key=\"5\">Alex</Menu.Item>\r\n        </SubMenu>\r\n        <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Team\">\r\n          <Menu.Item key=\"6\">Team 1</Menu.Item>\r\n          <Menu.Item key=\"8\">Team 2</Menu.Item>\r\n        </SubMenu> */}\r\n        <Menu.Item key=\"9\" icon={<FileOutlined />} />\r\n      </Menu>\r\n    </ Layout.Sider>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form } from 'antd'\r\nimport { ClearOutlined } from '@ant-design/icons'\r\nimport DeforestationForm from './DeforestationForm'\r\n\r\nconst ButtonClear = (props) => {\r\n  let [visible, setVisible] = useState(false)\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"button-clear\">\r\n        <Badge count={props.count}>\r\n          {/* <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"ButtonClear\" onClick={showDrawer} > */}\r\n          <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonClear\" onClick={props.onClick} >\r\n            <ClearOutlined />\r\n          </Button>\r\n        </Badge>\r\n      </div>\r\n      <Drawer\r\n        title=\"Deforestation\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={500}\r\n      >\r\n        {/* <DeforestationForm onFinish={(data) => console.log(\"halo\", data)} /> */}\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ButtonClear","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport { FireFilled } from '@ant-design/icons'\r\n\r\nconst ButtonFire = (props) => {\r\n  return (\r\n    <div className={props.className}>\r\n        <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonClear\" onClick={props.onClick} danger={true}>\r\n          <FireFilled />\r\n        </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ButtonFire","import React from 'react'\r\nimport { Card, Descriptions, Button } from 'antd'\r\nimport moment from 'moment'\r\n\r\nconst DfrsCard = props => {\r\n  return (\r\n    <Card type=\"inner\" title={`Deforestation ${props.index}`} extra={<Button type=\"dashed\" onClick={props.zoomTo} >Zoom to</Button>}>\r\n      <Descriptions size=\"small\" layout=\"vertical\" >\r\n        <Descriptions.Item label=\"Latitude\">{props.lat}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Longitude\">{props.lon}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Start Date\">{ moment(new Date(props.startdate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"End Date\">{ moment( new Date(props.enddate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Peatland\">{props.peatland} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Mangrove\">{props.mangrove} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Other\">{props.other} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Total\">{props.total} ha</Descriptions.Item>\r\n      </Descriptions>\r\n    </Card>\r\n  )\r\n}\r\nexport default DfrsCard","import React, { useEffect, useState } from 'react'\r\nimport { Table, Divider, Tag, Button } from 'antd'\r\nimport { getDistance } from 'geolib'\r\nimport { loadModules } from 'esri-loader'\r\n\r\nconst ModalContent = (props) => {\r\n  const [pomData, setPomData] = useState([])\r\n  const [concData, setConcData] = useState([])\r\n  const [peatData, setPeatData] = useState([])\r\n  const [hotspotData, setHotspotData] = useState([])\r\n  const dfrsLoc = { latitude: props.location.latitude, longitude: props.location.longitude }\r\n  // console.log(\"dfrsarea\", props.dfrsArea)\r\n\r\n  useEffect(\r\n    () => {\r\n      loadModules([\r\n        \"esri/geometry/geometryEngine\",\r\n        \"esri/geometry/projection\",\r\n        \"esri/geometry/SpatialReference\"\r\n      ]).then(([geometryEngine, projection, SpatialReference]) => {\r\n        const [arrayPom, arrayConc, arrayPeat, arrayHotspot] = props.data\r\n        console.log(\"hs\", arrayHotspot)\r\n        // destructuring data POM dan loop, sehingga didapatkan jarak ke titik deforestasi\r\n        let dataPom = arrayPom.map((el, i) => {\r\n          let endLoc = { latitude: el.geometry.latitude, longitude: el.geometry.longitude }\r\n          let jarak = getDistance(dfrsLoc, endLoc)\r\n          let status = jarak > 1000 ? 'warning' : 'impacted'\r\n          return {\r\n            key: i,\r\n            no: i + 1,\r\n            name: el.attributes.PomName,\r\n            distance: jarak / 1000,\r\n            distanceNumber: jarak,\r\n            status: status\r\n          }\r\n        })\r\n        // sort ascending\r\n        dataPom.sort((a, b) => a.distanceNumber - b.distanceNumber)\r\n        // console.log(\"datapom\", dataPom)\r\n\r\n        let dataHotspot = arrayHotspot.map( (el,i) => {\r\n          return{\r\n            key : i,\r\n            acq_date : el.attributes.Loc_Date,\r\n            latitude : el.attributes.Latitude,\r\n            longitude : el.attributes.Longitude,\r\n            verification : el.attributes.Verificati\r\n          }\r\n        })\r\n        console.log(\"dataHotspot\", dataHotspot)\r\n\r\n        // Destructuring data konsesi, karena datanya berupa area dan projeksinya berbeda, perlu load module projection dari Arcmap\r\n        // dan akan mereturn promise\r\n        let dataConc = arrayConc.map((el, i) => {\r\n          return projection.load().then(\r\n            () => {\r\n              let outSpatialReference = new SpatialReference({\r\n                wkid: 3857 //Sphere_Sinusoidal projection\r\n              });\r\n              let g1 = projection.project(props.dfrsArea, outSpatialReference)\r\n              let g2 = projection.project(el.geometry, outSpatialReference)\r\n              let j = geometryEngine.distance(g1, g2)\r\n              let status = j < 1000 ? 'impacted' : 'warning'\r\n              let result = {\r\n                key: i,\r\n                no: i + 1,\r\n                name: el.attributes.Name,\r\n                area: 10,\r\n                distance: (j / 1000).toFixed(2),\r\n                status: status\r\n              }\r\n              return result\r\n            }\r\n          )\r\n        })\r\n\r\n        // Destructuring data Peat\r\n        let dataPeat = arrayPeat.map( (el, i) => {\r\n          console.log(\"el\", el)\r\n          return projection.load().then(\r\n            () => {\r\n              let outSpatialReference = new SpatialReference({\r\n                wkid: 3857 //Sphere_Sinusoidal projection\r\n              });\r\n              let g1 = projection.project(props.dfrsArea, outSpatialReference)\r\n              let g2 = projection.project(el.geometry, outSpatialReference)\r\n              let j = geometryEngine.distance(g1, g2)\r\n              let status = j < 1000 ? 'impacted' : 'warning'\r\n              return {\r\n                remark : el.attributes.Category,\r\n                area : el.attributes[\"SHAPE.STArea()\"],\r\n                key : i,\r\n                status : status,\r\n                distance: (j / 1000).toFixed(2),\r\n              }\r\n            }\r\n          )\r\n        })\r\n\r\n        // Karena data konsesi yang bersinggunan mereturn promise, makan perlu di promise all array tersebut, setekah promise sukses kemudian ubah state agar tampilan data berubah\r\n        Promise.all(dataConc).then(\r\n          konsesi => setConcData(konsesi)\r\n        )\r\n        Promise.all(dataPeat).then(\r\n          peat => setPeatData(peat)\r\n        )\r\n        setPomData(dataPom)\r\n        setHotspotData(dataHotspot)\r\n      })\r\n    }\r\n    , [])\r\n\r\n  const columnsPom = [\r\n    {\r\n      title: 'Pom Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      span: 10,\r\n      sorter: (a, b) => a.name.localeCompare(b.name),\r\n      sortDirections: ['ascend']\r\n    },\r\n    {\r\n      title: 'Distance (estimation) in Km',\r\n      dataIndex: 'distance',\r\n      key: 'distance',\r\n      span: 10,\r\n      sorter: (a, b) => a.distance - b.distance\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      span: 10,\r\n      render: status => {\r\n        let color = status == \"warning\" ? 'yellow' : 'red'\r\n        return (\r\n          <Tag color={color} key={status}>\r\n            {status}\r\n          </Tag>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      dataIndex: 'action',\r\n      key: 'action',\r\n      span: 10\r\n    }\r\n  ];\r\n  const columnsConc = [\r\n    {\r\n      title: 'Concession',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      span : 10\r\n    },\r\n    {\r\n      title: 'Distance in Km (Estimation)',\r\n      dataIndex: 'distance',\r\n      key: 'distance',\r\n      span : 10,\r\n      sorter: (a, b) => a.distance - b.distance,\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      span: 10,\r\n      render: status => {\r\n        let color = status == \"warning\" ? 'yellow' : 'red'\r\n        return (\r\n          <Tag color={color} key={status}>\r\n            {status}\r\n          </Tag>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      dataIndex: 'action',\r\n      key: 'action',\r\n      span: 10\r\n    }\r\n  ];\r\n  const columnsPeat = [\r\n    {\r\n      title : 'Remarks',\r\n      dataIndex : 'remark',\r\n      key : 'remark',\r\n      span : 10\r\n    },\r\n    {\r\n      title: 'Distance in Km (Estimation)',\r\n      dataIndex: 'distance',\r\n      key: 'distance',\r\n      span : 10,\r\n      sorter: (a, b) => a.distance - b.distance,\r\n    },\r\n    {\r\n      title : 'Total Area',\r\n      dataIndex : 'area',\r\n      key : 'area',\r\n      span : 10\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      dataIndex: 'action',\r\n      key: 'action',\r\n      span: 10\r\n    }\r\n  ]\r\n\r\n  const columnHotspot = [\r\n    {\r\n      title : 'Latitude',\r\n      dataIndex : 'latitude',\r\n      key : 'latitude',\r\n      span : 10\r\n    },\r\n    {\r\n      title : 'Longitude',\r\n      dataIndex : 'longitude',\r\n      key : 'longitude',\r\n      span : 10\r\n    },\r\n    {\r\n      title : 'Acquisition Date',\r\n      dataIndex : 'acq_date',\r\n      key : 'acq_date',\r\n      span : 10\r\n    },\r\n    {\r\n      title : 'Verification',\r\n      dataIndex : 'verification',\r\n      key : 'verification',\r\n      span : 10\r\n    },\r\n  ]\r\n\r\n\r\n  return (\r\n    <div style={{ height: '60vh', overflow: 'scroll', paddingLeft: '5vw', paddingRight: '5vw' }}>\r\n      <h2>POM</h2>\r\n      <Table dataSource={pomData} columns={columnsPom} />\r\n      <Divider />\r\n      <h2>Concession</h2>\r\n      <Table dataSource={concData} columns={columnsConc} />\r\n      <Divider />\r\n      <h2>Peat</h2>\r\n      <Table dataSource={peatData} columns={columnsPeat} />\r\n      <Divider />\r\n      <h2>Hotspot</h2>\r\n      <Table dataSource={hotspotData} columns={columnHotspot} />\r\n      <Divider />\r\n      <Button type=\"dashed\" >Export to PDF</Button>\r\n      <Divider />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalContent","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ContextType} from '../Context'\r\nimport { loadModules } from 'esri-loader';\r\nimport { Button, Descriptions, Divider, Drawer, Slider, Checkbox, Space, Result, Empty, Modal, InputNumber, Row, Col, Spin } from 'antd'\r\nimport ButtonNotif from '../Components/ButtonNotif';\r\nimport ButtonClear from '../Components/ButtonClear';\r\nimport ButtonFire from '../Components/ButtonFire'\r\nimport DeforestationForm from '../Components/DeforestationForm';\r\nimport DfrsCard from '../Components/DfrsCard'\r\nimport ModalContent from '../Components/ModalContent'\r\nimport moment from 'moment'\r\nimport PickerButton from 'antd/lib/date-picker/PickerButton';\r\n\r\nconst WsEndPoint = \"http://10.7.12.21:8000/service/WGService.asmx/\"\r\n\r\nclass MapApp extends React.Component {\r\n  static contextType = ContextType\r\n\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.mapRef = React.createRef()\r\n    this.state = {\r\n      isDrawerShow : false,\r\n      dfrsResult : null,\r\n      timedata : [],\r\n      showModal : false,\r\n      modalData : [],\r\n      isLoading : false,\r\n      dfrsPointGeom : [],\r\n      dfrsAreaGeom : null,\r\n      timeSelection : []\r\n    }\r\n\r\n    this.theme = {\r\n      dark : \"https://js.arcgis.com/4.16/esri/themes/dark/main.css\",\r\n      light : true,\r\n    }\r\n\r\n    this.f_fetchTimeDfrs()\r\n  }\r\n\r\n  //=============================================================\r\n  // FUNCTION\r\n  //=============================================================\r\n  f_showDrawer = (showed) => {\r\n    this.setState({\r\n      isDrawerShow : showed\r\n    })\r\n  }\r\n\r\n  f_dfrsFormOnFinish = (datamoment, type) => {\r\n    let whereCond, timeSelection\r\n    if(type == \"range-picker\"){\r\n      let startDate = datamoment[\"range-picker\"][0].format(\"YYYY-MM-DD\")\r\n      let endDate = datamoment[\"range-picker\"][1].format(\"YYYY-MM-DD\")\r\n      // whereCond = `end_date >= '${startDate}' and end_date <= '${endDate}'`\r\n      whereCond = `start_date >= '${startDate}' and end_date <= '${endDate}'`\r\n      timeSelection = [startDate, endDate]\r\n    }\r\n    else if(type == \"period\"){\r\n      let [start, end ] = datamoment[\"period-time\"].split(\"|\")\r\n      whereCond = `end_date >= '${start}' and end_date <= '${end}'`\r\n      // whereCond = `start_date >= '${start}' and end_date <= '${end}'`\r\n      timeSelection = [start, end]\r\n    }\r\n    else if(type == \"all\"){\r\n      whereCond = ``\r\n      timeSelection = []\r\n    }\r\n    this.setState({ timeSelection : timeSelection })\r\n\r\n    // FILTER UNTUK CARD SELECTION\r\n    let query =  this.layerDeforestationPoint.createQuery()\r\n    query.where = whereCond\r\n    this.layerDeforestationPoint.queryFeatures(query).then(response => this.setState({ dfrsResult : response.features }) )\r\n\r\n    // FILTER DEFORESTASI DI LAYER\r\n    this.layerDeforestationPoint.definitionExpression = whereCond\r\n    this.layerDeforestationPoint.visible = true\r\n  }\r\n\r\n  f_zoomTo = (lat, lon) => {\r\n    console.log(lat, lon)\r\n    this.view.center = [lon, lat]\r\n    this.view.zoom = 13\r\n  }\r\n\r\n  f_fetchTimeDfrs = () => {\r\n    fetch(`https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/0/query?f=json&outFields=[start_date,end_date]&where=1=1&returnGeometry=false`)\r\n      .then(response => response.json() )\r\n      .then( data => this.setState({\r\n        timedata : data.features\r\n      }) )\r\n  }\r\n\r\n  f_clearBufferLayers = () => {\r\n    this.bufferLayer.removeAll()\r\n  }\r\n\r\n  f_getDatesRange(startdate, enddate){\r\n    let nextStartDate = startdate\r\n    let arr = []\r\n    while(nextStartDate <= enddate){\r\n      let start = nextStartDate.format()\r\n      let end = nextStartDate.add(13, 'days').format()\r\n      arr.push([ start, end ])\r\n      nextStartDate = nextStartDate.add(1, 'days')\r\n    }\r\n    return arr.reverse()\r\n  }\r\n\r\n  f_onClear = () => {\r\n    this.setState({ dfrsResult : null })\r\n    this.layerDeforestationPoint.visible = false\r\n  }\r\n\r\n  f_hotspot = () => {\r\n    \r\n  }\r\n  //\r\n  // LIFECYCLE\r\n  //\r\n  componentDidMount() {\r\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/layers/VectorTileLayer', 'esri/widgets/BasemapGallery', 'esri/widgets/Expand', \"esri/widgets/LayerList\", \"esri/layers/FeatureLayer\", \"esri/layers/GroupLayer\", \"esri/Graphic\", \"esri/layers/GraphicsLayer\", \"esri/widgets/Legend\", \"esri/geometry/geometryEngine\", \"esri/core/watchUtils\", \"esri/widgets/DistanceMeasurement2D\", \"esri/tasks/support/Query\", \"esri/widgets/TimeSlider\"], { css: this.theme.light }).then(\r\n      ([ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query, TimeSlider]) => {\r\n        //===============================================================\r\n        // LOCAL COMPONENT\r\n        //===============================================================\r\n        // Table deskripsi pada popup information\r\n        const DescriptionTable = (props) => {\r\n          let [isTrace, setTrace] = useState(false)\r\n\r\n          let data = props.data\r\n\r\n          let detailDescription = []\r\n          for (var key of Object.keys(data)) {\r\n            detailDescription.push(<Descriptions.Item label={key} key={key} >{data[key]}</Descriptions.Item>)\r\n          }\r\n\r\n          // Function to draw spider map from POM to refinery\r\n          let f_traceData = (id, layername, lon, lat) => {\r\n            let url\r\n            if (layername === \"Refinery\") {\r\n              url = `${WsEndPoint}_GetPOMSupplier_?refinery=${id}`\r\n              this.layerPom.visible = true\r\n            } else if (layername === \"POM\") {\r\n              url = `${WsEndPoint}_GetRefinery_?pom=${id}`\r\n              this.layerRefinery.visible = true\r\n            }\r\n\r\n            fetch(url)\r\n              .then(response => response.json())\r\n              .then(resultData => {\r\n                // DRAW LINE\r\n                let lineSymbol = {\r\n                  type: 'simple-line',\r\n                  color: [226, 119, 40],\r\n                  width: 2\r\n                }\r\n\r\n                resultData.map(el => {\r\n                  let spiderLine = {\r\n                    type: \"polyline\",\r\n                    paths: [\r\n                      // [props.position.longitude, props.position.latitude],\r\n                      [lon, lat],\r\n                      [parseFloat(el.X_Coor), parseFloat(el.Y_Coor)]\r\n                    ]\r\n                  }\r\n\r\n                  let spiderLineGraphic = new Graphic({\r\n                    geometry: spiderLine,\r\n                    symbol: lineSymbol\r\n                  })\r\n\r\n                  this.view.graphics.add(spiderLineGraphic)\r\n                })\r\n              })\r\n              .then(() => setTrace(true))\r\n              .catch(error => console.log('error', error));\r\n\r\n          }\r\n\r\n          let f_clearGraphic = () => {\r\n            this.view.graphics.removeAll()\r\n            this.layerRefinery.visible = false\r\n            setTrace(false)\r\n          }\r\n\r\n          let f_button = () => {\r\n            switch (props.title) {\r\n              case \"POM\":\r\n                return isTrace ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.pomid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n              case \"Refinery\":\r\n                return isTrace == true ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.rfid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n            }\r\n          }\r\n\r\n          return (\r\n            <React.Fragment>\r\n              <Descriptions title={props.title} style={{ fontSize: '12px' }} bordered column={1} size=\"small\">\r\n                {detailDescription}\r\n              </Descriptions>\r\n              <Divider />\r\n              {f_button()}\r\n            </React.Fragment>\r\n          )\r\n        }\r\n\r\n        // Konten saat Deforestation point di klik\r\n        const DfrsPopupContent = (props) => {\r\n          console.log(\"props\", props)\r\n          const [inputValue, setInputValue] = useState(0)\r\n          const layerOptions = [\r\n            { label : 'POM', value : this.layerPom, key:\"1\"  },\r\n            { label : 'Reffinery', value : this.layerRefinery, key:\"2\" },\r\n            { label : 'Concession Area', value : this.layerPlantationArea, key:\"3\" },\r\n            { label : 'Peatland', value : this.layerPeat, key:\"4\" },\r\n          ]\r\n\r\n          const updateLayerVisibility = (e) => {\r\n            e.target.value.visible = e.target.checked\r\n          }\r\n\r\n          const onChange = (value) => { \r\n            setInputValue(value)\r\n            props.onSliderChange(value) \r\n          }\r\n\r\n          const buttonOnClick = () => {\r\n            let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n            if(geom){\r\n\r\n              // Query untuk mencari area yang berintersect dengan area buffer\r\n              const query = new Query()\r\n              query.geometry = geom\r\n              query.spatialRelationship = \"intersects\"\r\n              query.returnGeometry = true\r\n              query.outFields = \"*\"\r\n              query.outSpatialReference = { wkid: 4326 };\r\n\r\n              // Query unntuk menyeleksi area deforestasi berdasarkan ID point\r\n              const query2 = new Query\r\n              query2.outFields = \"*\"\r\n              query2.returnGeometry = true\r\n              query2.where = `id = '${props.id}'`\r\n\r\n              const queryHotspot = new Query\r\n              queryHotspot.outFields = \"*\"\r\n              queryHotspot.geometry = geom\r\n              queryHotspot.returnGeometry = true\r\n              queryHotspot.spatialRelationship = \"intersects\"\r\n              queryHotspot.where = `Acq_Date between date'${moment( props.attributes.start_date ).format(\"YYYY-MM-DD\")}' and '${ moment(props.attributes.end_date).format(\"YYYY-MM-DD\")}'`\r\n\r\n              // Setelah berhasil di query hasil akan dikirim ke modal, untuk dianalisis apakah di geometry tersebut terdapat POI yang terimpact\r\n              this.layerDeforestationArea.queryFeatures(query2).then(\r\n                result => { \r\n                  this.setState({\r\n                    dfrsAreaGeom : result.features[0].geometry\r\n                  })\r\n                }\r\n              )\r\n              \r\n              // Mengaktifkan loading spinner\r\n              this.setState({ isLoading : true })\r\n\r\n              // Mengeksekusi Query sebelum dikirim ke Modal data2 apa saja yang terindikasi bersinggungan dengan area buffer yaitu layer pom, area plantation dan peat\r\n              Promise.all([this.layerPom.queryFeatures(query), this.layerPlantationArea.queryFeatures(query), this.layerPeat.queryFeatures(query), this.layerHotspot.queryFeatures(queryHotspot) ])\r\n                .then(result => {\r\n                  let featureSet = result.map( featureSet => featureSet.features )\r\n                  this.setState({ modalData : featureSet})\r\n                })\r\n                // Menonaktifkan spinner dan menampilkan modal\r\n                .then( () => this.setState({showModal : true, isLoading : false}) )\r\n\r\n            }\r\n          }\r\n\r\n          return(\r\n            <>\r\n              <Divider />\r\n              <h4>Buffer Radius in Kilometers</h4>\r\n              <div>\r\n                <Row>\r\n                  <Col span={17} >\r\n                    <Slider defaultValue={inputValue} max={50} value = { typeof inputValue ==='number'? inputValue : 0 }tooltipPlacement=\"bottom\" onChange={ onChange } \r\n                    />\r\n                  </Col>\r\n                  <Col span={2}>\r\n                    <InputNumber min={0} max={50} style={{ margin: '0 16px' }} value={inputValue} onChange={onChange} />\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n              <Divider />\r\n              <h4>Show or hide layer</h4>\r\n              {\r\n                layerOptions.map( opt => <Checkbox key={opt.key} value={opt.value} onChange={updateLayerVisibility} >{ opt.label }</Checkbox>)\r\n              }\r\n              <Divider />\r\n              <Space>\r\n                <Button type=\"primary\" onClick={ buttonOnClick }>Analysze</Button>\r\n                <Button type=\"primary\" onClick={()=>this.setState({showModal : true})} >Export to PDF</Button>\r\n              </Space>\r\n            </>\r\n          )\r\n        }\r\n\r\n        //===============================================================\r\n        // BASE FUNCTION\r\n        //===============================================================\r\n        // Fungsi untuk menggambar buffer\r\n        const updateBufferGraphic = ( geometry,size ) => {\r\n          let polySym = {\r\n            type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\r\n            color: [140, 140, 222, 0.5],\r\n            outline: {\r\n              color: [0, 0, 0, 0.5],\r\n              width: 2\r\n            }\r\n          };\r\n          if (size > 0){\r\n            var bufferGeometry = geometryEngine.geodesicBuffer( geometry, size, \"kilometers\")\r\n            if(this.bufferLayer.graphics.length === 0){\r\n              this.bufferLayer.add(\r\n                new Graphic({\r\n                  geometry : bufferGeometry,\r\n                  symbol : polySym\r\n                })\r\n              )\r\n            } else {\r\n              this.bufferLayer.graphics.getItemAt(0).geometry = bufferGeometry\r\n            }\r\n          } else{\r\n            this.bufferLayer.removeAll()\r\n          }\r\n        }\r\n\r\n        // Generate isi dari popup\r\n        const generateContent = (target, title) => {\r\n          console.log(target, title)\r\n          \r\n          let popupDiv = document.createElement('div')\r\n\r\n          if(title === \"POM\"){\r\n            pomPopupTemplate.content = popupDiv\r\n            ReactDOM.render(<DescriptionTable data={target.graphic.attributes} title={title} position={{ latitude: target.graphic.geometry.latitude, longitude: target.graphic.geometry.longitude }} />, popupDiv)\r\n          } \r\n          else if (title === \"Deforestation Point\"){\r\n            dpPopupTemplate.content = popupDiv\r\n\r\n            const onSliderChange = (bufferSize) => {\r\n              let pointGeometry = target.graphic.geometry\r\n              this.setState({\r\n                dfrsPointGeom : pointGeometry\r\n              })\r\n              updateBufferGraphic(pointGeometry, bufferSize)\r\n            }\r\n\r\n            const onCheckboxChange = layerList => {\r\n              layerList.map( layer => {\r\n                layer.visible = true\r\n              })\r\n            }\r\n\r\n            ReactDOM.render(<DfrsPopupContent id={target.graphic.attributes.id} onSliderChange={onSliderChange} attributes={ target.graphic.attributes } />, popupDiv)\r\n          }\r\n\r\n          return popupDiv\r\n        }\r\n\r\n        //===============================================================\r\n        // DOM\r\n        //===============================================================\r\n        // document.getElementById(\"button-form-deforestation\").addEventListener('click', function(e){\r\n        //   console.log(e)\r\n        // })\r\n\r\n        //===============================================================\r\n        // MAP INIT\r\n        //===============================================================\r\n        this.map = new ArcGISMap({\r\n          basemap: 'streets-night-vector'\r\n        });\r\n\r\n        //===============================================================\r\n        // VIEW INIT\r\n        //===============================================================\r\n        this.view = new MapView({\r\n          container: this.mapRef.current,\r\n          map: this.map,\r\n          center: [118, 0],\r\n          zoom: 4\r\n        });\r\n\r\n        this.view.when(\r\n          function(){console.log(\"sukses\") },\r\n          function(err){console.log(err)}\r\n        )\r\n\r\n        //==============================================================\r\n        // LAYER\r\n        //==============================================================\r\n        \r\n        // GROUP PLANTATION\r\n        //\r\n        this.layerPlantationPoint = new FeatureLayer({\r\n          // url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/0\",\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/OilPalm_Plantation_TP_Supplier/MapServer/0\",\r\n          title: \"Oil Palm Plantation of Third Party Supplier\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerPlantationArea = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/2\",\r\n          title: \"Oil Palm Area\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerPeat = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Layer_Fungsi_Ekosistem_Gambut_201907_sde/MapServer/0\",\r\n          title : \"Peat Ecosystem\",\r\n          visible : false,\r\n          outFields : ['*']\r\n        })\r\n        \r\n        // GROUP INDUSTRIES\r\n        //\r\n        this.layerPkCrushing = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/industries_MIL1/MapServer/0\",\r\n          title: \"PK Crushing\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerRefinery = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Layer_Refinery_201908_sde/MapServer/0\",\r\n          title: \"Refinery\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['*']\r\n        });\r\n\r\n        this.layerPom = new FeatureLayer({\r\n          // url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/1\",\r\n          url: \"https://gisportal.wilmar.co.id/arcgisserver/rest/services/NewGISInteractiveMap_2/POM/MapServer/0\",\r\n          title: \"POM Supplier\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['pomid', 'PomName', 'CompanyNam', 'PlaceName', 'Tankcap', 'Silocap']\r\n        });\r\n        // this.layerPom = importedLayer.layerPom\r\n\r\n        // GROUP DEFORESTATION\r\n        //\r\n        this.layerDeforestationPoint = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/0\",\r\n          title : \"Deforestation Point\",\r\n          visible : false,\r\n          popupEnabled: true,\r\n          outFields : ['*']\r\n        });\r\n        this.map.add(this.layerDeforestationPoint)\r\n\r\n        this.layerDeforestationArea = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/1\",\r\n          title : \"Deforestation Area\",\r\n          visible : false\r\n        });\r\n\r\n        // Basemap WILMAR\r\n        //\r\n        var basemapWilmar = new VectorTileLayer({\r\n          url: 'https://gisportal.wilmar.co.id/arcgisserver/rest/services/Hosted/Wilmar_Basemap2/VectorTileServer?f=pjson'\r\n        });\r\n\r\n        // HOTSPOT\r\n        this.layerHotspot = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Hotspot_HSP1/MapServer/0\",\r\n          title : \"Hotspot\",\r\n          visible : false\r\n        })\r\n        this.map.add(this.layerHotspot)\r\n\r\n        // SKETCH LAYER\r\n        //\r\n        this.sketchLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        this.bufferLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        this.map.addMany([this.sketchLayer, this.bufferLayer])\r\n\r\n        // LAYER GROUPING\r\n        //\r\n        var glIndustries = new GroupLayer({\r\n          title: \"Industries\"\r\n        });\r\n\r\n        var glPlantation = new GroupLayer({\r\n          title : \"Plantation\"\r\n        });\r\n\r\n        var glDeforestation = new GroupLayer({\r\n          title : \"Deforestation\"\r\n        })\r\n\r\n        glIndustries.addMany([ this.layerPkCrushing, this.layerRefinery, this.layerPom, ]);\r\n        glPlantation.addMany([ this.layerPlantationArea, this.layerPlantationPoint, this.layerPeat ])\r\n        glDeforestation.addMany([ this.layerDeforestationArea, this.layerDeforestationPoint,  ])\r\n        this.map.addMany([ glPlantation, glIndustries, glDeforestation]);\r\n\r\n        //=================================================================\r\n        // WIDGET\r\n        //=================================================================\r\n\r\n        // BASEMAP GALERY\r\n        //\r\n        var basemapGallery = new BasemapGallery({\r\n          view: this.view\r\n        });\r\n        var expand = new Expand({\r\n          view: this.view,\r\n          content: basemapGallery,\r\n          expandTooltip: 'Change Basemap'\r\n        });\r\n        this.view.ui.add(expand, \"top-right\");\r\n\r\n        // LAYERLIST\r\n        //\r\n        var layerList = new LayerList({\r\n          view: this.view,\r\n        })\r\n        var expandLayerList = new Expand({\r\n          view: this.view,\r\n          content: layerList,\r\n          expandTooltip: 'Layer List'\r\n        })\r\n        this.view.ui.add(expandLayerList, \"top-right\")\r\n\r\n        // LEGEND\r\n        //\r\n        var legend = new Legend({\r\n          view : this.view,\r\n        })\r\n        this.view.ui.add(legend, \"bottom-right\")\r\n\r\n        //\r\n        //// TIMESLIDER\r\n        //\r\n        const timeSlider = new TimeSlider({\r\n          container: \"timeSlider\",\r\n          playRate: 50,\r\n          stops: {\r\n            interval: {\r\n              value: 1,\r\n              unit: \"hours\"\r\n            }\r\n          }\r\n        });\r\n        // this.view.ui.add(timeSlider, \"manual\");\r\n\r\n        //=================================================================\r\n        //POPUP SET\r\n        //=================================================================\r\n        let pomPopupTemplate = {\r\n          title: 'POM Suplier',\r\n          content: (target) => generateContent(target, \"POM\")\r\n        }\r\n        this.layerPom.popupTemplate = pomPopupTemplate\r\n\r\n        let refineryPopupTemplate = {\r\n          title: 'Refinery',\r\n          content: (target) => generateContent(target, \"Refinery\")\r\n        }\r\n        this.layerRefinery.popupTemplate = refineryPopupTemplate\r\n\r\n        let dpPopupTemplate = {\r\n          title : 'Deforestation Point',\r\n          content : target => generateContent(target, \"Deforestation Point\")\r\n        }\r\n        this.layerDeforestationPoint.popupTemplate = dpPopupTemplate \r\n\r\n        //==================================================================\r\n        // EVENT\r\n        //==================================================================\r\n        watchUtils.whenTrue(this.view, \"stationary\", () => {\r\n          if(this.view.zoom >= 10){\r\n            console.log(this.view.zoom)\r\n            this.layerDeforestationArea.visible = this.layerDeforestationPoint.visible ? true : false \r\n          }\r\n          else{\r\n            this.layerDeforestationArea.visible = false\r\n          }\r\n        })\r\n      });\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // console.log(this.context)\r\n    // this.layerPlantationPoint.visible = true\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.view) {\r\n      this.view.container = null\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let dfrsContent\r\n    if(this.state.dfrsResult == null){\r\n      dfrsContent = <Result title=\"Please choose date range\" />\r\n    }\r\n    else if(this.state.dfrsResult.length == 0){\r\n      dfrsContent = <Empty />\r\n    } \r\n    else {\r\n      let content = []\r\n      this.state.dfrsResult.map( (features, index) => {\r\n        content.push(<DfrsCard key={index} lat={features.attributes.POINT_X} lon={features.attributes.POINT_Y} startdate={features.attributes.start_date} enddate={features.attributes.end_date} peatland={features.attributes.peatland} mangrove={features.attributes.mangrove} other={features.attributes.other} total={features.attributes.total} index={index + 1} zoomTo={()=>this.f_zoomTo(features.attributes.POINT_Y, features.attributes.POINT_X) }  />)\r\n      })\r\n        dfrsContent = <Space direction=\"vertical\">{content}</Space>\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"webmap\" ref={this.mapRef} />\r\n        <div className=\"spinner\">\r\n          <Spin spinning={this.state.isLoading} size=\"large\" tip=\"Loading...\" />\r\n        </div>\r\n        {/* <div id=\"timeSlider\"></div> */}\r\n        <ButtonNotif onClick={ ()=>this.f_showDrawer(true) } count={4} />\r\n        <ButtonClear onClick={ this.f_clearBufferLayers }  />\r\n        <ButtonFire className=\"button-hotspot\" onClick={ () => this.layerHotspot.visible = ! this.layerHotspot.visible } />\r\n        <Drawer\r\n          title=\"Deforestation\"\r\n          placement=\"right\"\r\n          closable={true}\r\n          onClose={ () => this.f_showDrawer(false) }\r\n          visible={this.state.isDrawerShow}\r\n          width={500}\r\n        >\r\n          <DeforestationForm timesRange={this.f_getDatesRange(moment(\"20190215\"), moment())} onFinish={this.f_dfrsFormOnFinish} onClear={this.f_onClear} />\r\n          <Divider />\r\n          <div style={{display : 'flex', flexDirection : 'column', justifyContent : 'space-between'}}>\r\n            {dfrsContent}\r\n          </div>\r\n        </Drawer>\r\n        <Modal\r\n          title=\"Impacted\"\r\n          visible={this.state.showModal}\r\n          onOk={(e)=>this.setState({showModal : false})}\r\n          onCancel={(e)=>this.setState({showModal : false})}\r\n          width=\"80vw\"\r\n        >\r\n          <ModalContent data={this.state.modalData} location={this.state.dfrsPointGeom} dfrsArea={this.state.dfrsAreaGeom} />\r\n        </Modal>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapApp","import React from 'react';\nimport ButtonNotif from './Components/ButtonNotif';\nimport Sidebar from './Containers/Sidebar'\nimport MapApp from './Containers/MapApp'\nimport { ContextProvider } from './Context'\nimport { Layout } from 'antd';\nimport './App.css';\n\nconst { Content } = Layout\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sidebar />\n        <Layout className=\"site-layout\">\n          <Content style={{ margin: '0 0px' }}>\n            <div className=\"site-layout-background\" style={{ minHeight: '100vh' }}>\n              <MapApp />\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    </ContextProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}