{"version":3,"sources":["Context.jsx","Components/DeforestationForm.jsx","Components/ButtonNotif.jsx","Containers/Sidebar.jsx","Components/DfrsCard.jsx","Containers/MapApp.jsx","App.js","serviceWorker.js","index.js"],"names":["ContextType","React","createContext","Provider","ContextProvider","Consumer","state","dfrsFormData","f_setDfrsFormData","data","setState","value","this","props","children","Component","formItemLayout","labelCol","xs","span","sm","wrapperCol","DeforestationForm","name","onFinish","Item","label","RangePicker","format","offset","type","htmlType","id","ButtonNotif","useState","visible","setVisible","Fragment","className","count","shape","size","onClick","NotificationFilled","title","placement","closable","onClose","width","Sidebar","Menu","SubMenu","collapsed","Sider","theme","defaultSelectedKeys","mode","key","icon","PieChartOutlined","FileOutlined","DfrsCard","index","extra","zoomTo","layout","lat","lon","moment","Date","startdate","enddate","peatland","mangrove","other","total","WsEndPoint","MapApp","context","f_showDrawer","showed","isDrawerShow","f_dfrsFormOnFinish","datamoment","startDate","endDate","query","layerDeforestationPoint","createQuery","where","queryFeatures","then","response","dfrsResult","features","definitionExpression","mapRef","createRef","loadModules","css","ArcGISMap","MapView","VectorTileLayer","BasemapGallery","Expand","LayerList","FeatureLayer","GroupLayer","Graphic","GraphicsLayer","Legend","geometryEngine","watchUtils","Query","DescriptionTable","isTrace","setTrace","detailDescription","Object","keys","push","f_traceData","layername","url","layerPom","layerRefinery","fetch","json","resultData","lineSymbol","color","map","el","spiderLine","paths","parseFloat","X_Coor","Y_Coor","spiderLineGraphic","geometry","symbol","view","graphics","add","catch","error","console","log","f_clearGraphic","removeAll","style","fontSize","bordered","column","danger","pomid","position","longitude","latitude","rfid","f_button","DfrsPopupContent","pomContent","setPomContent","concContent","setConcContent","layerOptions","layerPlantationArea","defaultValue","tooltipVisible","tooltipPlacement","onChange","onSliderChange","Group","options","layerList","layer","includes","length","bufferLayer","getItemAt","geom","undefined","spatialRelationship","pom","attributes","PomName","result","concession","Name","generateContent","target","popupDiv","document","createElement","pomPopupTemplate","content","ReactDOM","render","graphic","dpPopupTemplate","bufferSize","bufferGeometry","geodesicBuffer","outline","updateBufferGraphic","basemap","container","current","center","zoom","when","err","layerPlantationPoint","layerPkCrushing","popupEnabled","outFields","layerDeforestationArea","sketchLayer","listMode","addMany","glIndustries","glPlantation","glDeforestation","basemapGallery","expand","expandTooltip","ui","expandLayerList","legend","popupTemplate","refineryPopupTemplate","whenTrue","dfrsContent","POINT_X","POINT_Y","start_date","end_date","direction","ref","display","flexDirection","justifyContent","contextType","Content","Layout","App","minHeight","margin","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3d5a835d.chunk.js","sourcesContent":["import React from 'react'\r\nlet ContextType\r\nconst { Provider, Consumer } = (ContextType = React.createContext())\r\n\r\nclass ContextProvider extends React.Component {\r\n  state = {\r\n    dfrsFormData: {}\r\n  }\r\n\r\n  f_setDfrsFormData = (data) => {\r\n    this.setState({\r\n      dfrsFormData : data\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider value={{\r\n        ...this.state,\r\n        f_setDfrsFormData : this.f_setDfrsFormData\r\n      }}>\r\n        {this.props.children}\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport { ContextProvider, Consumer, ContextType }","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Consumer } from '../Context'\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form, Space } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport { propTypes } from 'react-bootstrap/esm/Image';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n}\r\n\r\nconst DeforestationForm = (props) => {\r\n  return (\r\n    <Form name=\"deforestation_control\" {...formItemLayout} onFinish={props.onFinish} >\r\n      <Form.Item name=\"range-picker\" label=\"Time Range\">\r\n        <DatePicker.RangePicker format=\"YYYY/MM/DD\" />\r\n      </Form.Item>\r\n      <Form.Item\r\n        wrapperCol={{\r\n          xs: {\r\n            span: 24,\r\n            offset: 0,\r\n          },\r\n          sm: {\r\n            span: 16,\r\n            offset: 8,\r\n          },\r\n        }}\r\n      >\r\n        <Space>\r\n          <Button type=\"primary\" htmlType=\"submit\" id=\"button-form-deforestation\">Submit</Button>\r\n          <Button type=\"primary\" htmlType=\"submit\" id=\"button-form-deforestation\">Clear</Button>\r\n        </Space>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default DeforestationForm","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Badge, Descriptions, Divider, Drawer, DatePicker, Form } from 'antd'\r\nimport { NotificationFilled } from '@ant-design/icons'\r\nimport DeforestationForm from './DeforestationForm'\r\n\r\nlet ButtonNotif = (props) => {\r\n  let [visible, setVisible] = useState(false)\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"button-notif\">\r\n        <Badge count={props.count}>\r\n          {/* <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={showDrawer} > */}\r\n          <Button type=\"primary\" shape=\"circle\" size=\"large\" id=\"buttonNotif\" onClick={props.onClick} >\r\n            <NotificationFilled />\r\n          </Button>\r\n        </Badge>\r\n      </div>\r\n      <Drawer\r\n        title=\"Deforestation\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={500}\r\n      >\r\n        {/* <DeforestationForm onFinish={(data) => console.log(\"halo\", data)} /> */}\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ButtonNotif","import React, { useState } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n} from '@ant-design/icons';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nlet Sidebar = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true)\r\n\r\n  return (\r\n    <Layout.Sider collapsed={collapsed}>\r\n      <div className=\"logo\" />\r\n      <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n        <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\r\n          Maps\r\n        </Menu.Item>\r\n        {/* <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"User\">\r\n          <Menu.Item key=\"3\">Tom</Menu.Item>\r\n          <Menu.Item key=\"4\">Bill</Menu.Item>\r\n          <Menu.Item key=\"5\">Alex</Menu.Item>\r\n        </SubMenu>\r\n        <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Team\">\r\n          <Menu.Item key=\"6\">Team 1</Menu.Item>\r\n          <Menu.Item key=\"8\">Team 2</Menu.Item>\r\n        </SubMenu> */}\r\n        <Menu.Item key=\"9\" icon={<FileOutlined />} />\r\n      </Menu>\r\n    </ Layout.Sider>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react'\r\nimport { Card, Descriptions, Button } from 'antd'\r\nimport moment from 'moment'\r\n\r\nconst DfrsCard = props => {\r\n  return (\r\n    <Card type=\"inner\" title={`Deforestation ${props.index}`} extra={<Button type=\"dashed\" onClick={props.zoomTo} >Zoom to</Button>}>\r\n      <Descriptions size=\"small\" layout=\"vertical\" >\r\n        <Descriptions.Item label=\"Latitude\">{props.lat}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Longitude\">{props.lon}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Start Date\">{ moment(new Date(props.startdate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"End Date\">{ moment( new Date(props.enddate)).format(\"yyyy/MM/DD\")}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Peatland\">{props.peatland} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Mangrove\">{props.mangrove} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Other\">{props.other} ha</Descriptions.Item>\r\n        <Descriptions.Item label=\"Total\">{props.total} ha</Descriptions.Item>\r\n      </Descriptions>\r\n    </Card>\r\n  )\r\n}\r\nexport default DfrsCard","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ContextType} from '../Context'\r\nimport { loadModules } from 'esri-loader';\r\nimport { Button, Descriptions, Divider, Drawer, Slider, Checkbox, Space, Result, Empty } from 'antd'\r\nimport ButtonNotif from '../Components/ButtonNotif';\r\nimport DeforestationForm from '../Components/DeforestationForm';\r\nimport DfrsCard from '../Components/DfrsCard'\r\nimport moment from 'moment'\r\nimport PickerButton from 'antd/lib/date-picker/PickerButton';\r\n\r\nconst WsEndPoint = \"http://10.7.12.21:8000/service/WGService.asmx/\"\r\n\r\nclass MapApp extends React.Component {\r\n  static contextType = ContextType\r\n\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.mapRef = React.createRef()\r\n    this.state = {\r\n      isDrawerShow : false,\r\n      dfrsResult : null\r\n    }\r\n  }\r\n\r\n  //=============================================================\r\n  // FUNCTION\r\n  //=============================================================\r\n  f_showDrawer = (showed) => {\r\n    this.setState({\r\n      isDrawerShow : showed\r\n    })\r\n  }\r\n\r\n  f_dfrsFormOnFinish = (datamoment) => {\r\n    // console.log(datamoment[\"range-picker\"][0].format(\"YYYY-MM-DD\"))\r\n    let startDate = datamoment[\"range-picker\"][0].format(\"YYYY-MM-DD\")\r\n    let endDate = datamoment[\"range-picker\"][1].format(\"YYYY-MM-DD\")\r\n\r\n    let query =  this.layerDeforestationPoint.createQuery()\r\n    query.where = `start_date >= '${startDate}' and end_date <= '${endDate}'`\r\n    // this.layerDeforestationPoint.queryFeatures(query).then(response => console.log(\"query\", response.features))\r\n    this.layerDeforestationPoint.queryFeatures(query).then(response => this.setState({ dfrsResult : response.features }) )\r\n\r\n    this.layerDeforestationPoint.definitionExpression = `start_date >= '${startDate}' and end_date <= '${endDate}'`\r\n    this.layerDeforestationPoint.visible = true\r\n  }\r\n\r\n  componentDidMount() {\r\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/layers/VectorTileLayer', 'esri/widgets/BasemapGallery', 'esri/widgets/Expand', \"esri/widgets/LayerList\", \"esri/layers/FeatureLayer\", \"esri/layers/GroupLayer\", \"esri/Graphic\", \"esri/layers/GraphicsLayer\", \"esri/widgets/Legend\", \"esri/geometry/geometryEngine\", \"esri/core/watchUtils\", \"esri/widgets/DistanceMeasurement2D\", \"esri/tasks/support/Query\"], { css: true }).then(\r\n      ([ArcGISMap, MapView, VectorTileLayer, BasemapGallery, Expand, LayerList, FeatureLayer, GroupLayer, Graphic, GraphicsLayer, Legend, geometryEngine, watchUtils, DistanceMeasurement2D, Query]) => {\r\n        //===============================================================\r\n        // LOCAL COMPONENT\r\n        //===============================================================\r\n        // Table deskripsi pada popup information\r\n        const DescriptionTable = (props) => {\r\n          let [isTrace, setTrace] = useState(false)\r\n\r\n          let data = props.data\r\n\r\n          let detailDescription = []\r\n          for (var key of Object.keys(data)) {\r\n            detailDescription.push(<Descriptions.Item label={key} key={key} >{data[key]}</Descriptions.Item>)\r\n          }\r\n\r\n          // Function to draw spider map from POM to refinery\r\n          let f_traceData = (id, layername, lon, lat) => {\r\n            let url\r\n            if (layername === \"Refinery\") {\r\n              url = `${WsEndPoint}_GetPOMSupplier_?refinery=${id}`\r\n              this.layerPom.visible = true\r\n            } else if (layername === \"POM\") {\r\n              url = `${WsEndPoint}_GetRefinery_?pom=${id}`\r\n              this.layerRefinery.visible = true\r\n            }\r\n\r\n            fetch(url)\r\n              .then(response => response.json())\r\n              .then(resultData => {\r\n                // DRAW LINE\r\n                let lineSymbol = {\r\n                  type: 'simple-line',\r\n                  color: [226, 119, 40],\r\n                  width: 2\r\n                }\r\n\r\n                resultData.map(el => {\r\n                  let spiderLine = {\r\n                    type: \"polyline\",\r\n                    paths: [\r\n                      // [props.position.longitude, props.position.latitude],\r\n                      [lon, lat],\r\n                      [parseFloat(el.X_Coor), parseFloat(el.Y_Coor)]\r\n                    ]\r\n                  }\r\n\r\n                  let spiderLineGraphic = new Graphic({\r\n                    geometry: spiderLine,\r\n                    symbol: lineSymbol\r\n                  })\r\n\r\n                  this.view.graphics.add(spiderLineGraphic)\r\n                })\r\n              })\r\n              .then(() => setTrace(true))\r\n              .catch(error => console.log('error', error));\r\n\r\n          }\r\n\r\n          let f_clearGraphic = () => {\r\n            this.view.graphics.removeAll()\r\n            this.layerRefinery.visible = false\r\n            setTrace(false)\r\n          }\r\n\r\n          let f_button = () => {\r\n            switch (props.title) {\r\n              case \"POM\":\r\n                return isTrace ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.pomid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n              case \"Refinery\":\r\n                return isTrace == true ? <Button type=\"primary\" onClick={f_clearGraphic} danger >Clear</Button> : <Button type=\"primary\" onClick={() => f_traceData(data.rfid, props.title, props.position.longitude, props.position.latitude)} >Trace</Button>\r\n                break\r\n            }\r\n          }\r\n\r\n          return (\r\n            <React.Fragment>\r\n              <Descriptions title={props.title} style={{ fontSize: '12px' }} bordered column={1} size=\"small\">\r\n                {detailDescription}\r\n              </Descriptions>\r\n              <Divider />\r\n              {f_button()}\r\n            </React.Fragment>\r\n          )\r\n        }\r\n\r\n        // Konten saat Deforestation point di klik\r\n        const DfrsPopupContent = (props) => {\r\n          const [pomContent, setPomContent] = useState([])\r\n          const [concContent, setConcContent] = useState([])\r\n          const layerOptions = [\r\n            { label : 'POM', value : this.layerPom  },\r\n            { label : 'Reffinery', value : this.layerRefinery },\r\n            { label : 'Concession Area', value : this.layerPlantationArea }]\r\n\r\n          const onCheckboxChange = layerList => {\r\n            layerOptions.map( layer => {\r\n              if( layerList.includes( layer.value ) ){\r\n                layer.value.visible = true\r\n              } else{\r\n                layer.value.visible = false\r\n              } \r\n            })\r\n          }\r\n\r\n          const buttonOnClick = () => {\r\n            console.log(this.bufferLayer.graphics.getItemAt(0))\r\n            let geom = ( this.bufferLayer.graphics.getItemAt(0) !== undefined ) ? this.bufferLayer.graphics.getItemAt(0).geometry : false\r\n            if(geom){\r\n              const query = new Query()\r\n              query.geometry = geom\r\n              query.spatialRelationship = \"intersects\";\r\n\r\n              // Querying POM\r\n              this.layerPom.queryFeatures(query).then( response => {\r\n                let features = response.features\r\n                let pom = features.map(el => {\r\n                  return el.attributes.PomName\r\n                })\r\n                setPomContent(pom)\r\n              })\r\n\r\n              // Querying Concession\r\n              this.layerPlantationArea.queryFeatures(query).then( result => {\r\n                console.log(result.features)\r\n                let concession = result.features.map( el => {\r\n                  return el.attributes.Name\r\n                })\r\n                setConcContent(concession)\r\n              })\r\n            }\r\n            // this.layerPom.definitionExpression = \"pomid = 7\"\r\n          }\r\n\r\n          return(\r\n            <>\r\n              <Divider />\r\n              <h4>Buffer Radius in Kilometers</h4>\r\n              <div style={{width : '80%'}}>\r\n                <Slider defaultValue={0} tooltipVisible tooltipPlacement=\"bottom\" onChange={ props.onSliderChange } />\r\n              </div>\r\n              <Divider />\r\n              <h4>Choose layer to include in analysis</h4>\r\n              {/* <Checkbox.Group options={layerOptions} onChange={ props.onCheckboxChange } /> */}\r\n              <Checkbox.Group options={layerOptions} onChange={ onCheckboxChange } />\r\n              <Divider />\r\n              {pomContent.length > 0 ? <h2>POM</h2> : null}\r\n              {pomContent.map(el => {\r\n                return <li key={el}>{el}</li>\r\n              })}\r\n              {concContent.length > 0 ? <><br/><h2>Concession</h2></> : null}\r\n              {\r\n                concContent.map(el => <li key={el}>{el}</li>)\r\n              }\r\n              <Divider />\r\n              {/* <Button type=\"primary\" onClick={ props.onClick }>Export to Report</Button> */}\r\n              <Button type=\"primary\" onClick={ buttonOnClick }>Analysze</Button>\r\n            </>\r\n          )\r\n        }\r\n\r\n        //===============================================================\r\n        // BASE FUNCTION\r\n        //===============================================================\r\n        // Fungsi untuk menggambar buffer\r\n        const updateBufferGraphic = ( geometry,size ) => {\r\n          let polySym = {\r\n            type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\r\n            color: [140, 140, 222, 0.5],\r\n            outline: {\r\n              color: [0, 0, 0, 0.5],\r\n              width: 2\r\n            }\r\n          };\r\n          if (size > 0){\r\n            var bufferGeometry = geometryEngine.geodesicBuffer( geometry, size, \"kilometers\")\r\n            if(this.bufferLayer.graphics.length === 0){\r\n              this.bufferLayer.add(\r\n                new Graphic({\r\n                  geometry : bufferGeometry,\r\n                  symbol : polySym\r\n                })\r\n              )\r\n            } else {\r\n              this.bufferLayer.graphics.getItemAt(0).geometry = bufferGeometry\r\n            }\r\n          } else{\r\n            this.bufferLayer.removeAll()\r\n          }\r\n        }\r\n\r\n        // Generate isi dari popup\r\n        const generateContent = (target, title) => {\r\n          console.log(target, title)\r\n          \r\n          let pomContent = ''\r\n\r\n          let popupDiv = document.createElement('div')\r\n\r\n          if(title === \"POM\"){\r\n            pomPopupTemplate.content = popupDiv\r\n            ReactDOM.render(<DescriptionTable data={target.graphic.attributes} title={title} position={{ latitude: target.graphic.geometry.latitude, longitude: target.graphic.geometry.longitude }} />, popupDiv)\r\n          } else if (title === \"Deforestation Point\"){\r\n            dpPopupTemplate.content = popupDiv\r\n\r\n            const onSliderChange = (bufferSize) => {\r\n              let pointGeometry = target.graphic.geometry\r\n              updateBufferGraphic(pointGeometry, bufferSize)\r\n            }\r\n\r\n            const onCheckboxChange = layerList => {\r\n              layerList.map( layer => {\r\n                layer.visible = true\r\n              })\r\n            }\r\n\r\n            ReactDOM.render(<DfrsPopupContent onSliderChange={onSliderChange} />, popupDiv)\r\n          }\r\n\r\n          return popupDiv\r\n        }\r\n\r\n        //===============================================================\r\n        // DOM\r\n        //===============================================================\r\n        // document.getElementById(\"button-form-deforestation\").addEventListener('click', function(e){\r\n        //   console.log(e)\r\n        // })\r\n\r\n        //===============================================================\r\n        // MAP INIT\r\n        //===============================================================\r\n        const map = new ArcGISMap({\r\n          basemap: 'streets-night-vector'\r\n        });\r\n\r\n        //===============================================================\r\n        // VIEW INIT\r\n        //===============================================================\r\n        this.view = new MapView({\r\n          container: this.mapRef.current,\r\n          map: map,\r\n          center: [118, 0],\r\n          zoom: 4\r\n        });\r\n\r\n        this.view.when(\r\n          function(){console.log(\"sukses\") },\r\n          function(err){console.log(err)}\r\n        )\r\n\r\n        //==============================================================\r\n        // LAYER\r\n        //==============================================================\r\n        \r\n        // GROUP PLANTATION\r\n        //\r\n        this.layerPlantationPoint = new FeatureLayer({\r\n          // url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/0\",\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/OilPalm_Plantation_TP_Supplier/MapServer/0\",\r\n          title: \"Oil Palm Plantation of Third Party Supplier\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerPlantationArea = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/2\",\r\n          title: \"Oil Palm Area\",\r\n          visible: false\r\n        });\r\n        \r\n        // GROUP INDUSTRIES\r\n        //\r\n        this.layerPkCrushing = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/industries_MIL1/MapServer/0\",\r\n          title: \"PK Crushing\",\r\n          visible: false\r\n        });\r\n\r\n        this.layerRefinery = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Layer_Refinery_201908_sde/MapServer/0\",\r\n          title: \"Refinery\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['*']\r\n        });\r\n\r\n        this.layerPom = new FeatureLayer({\r\n          url: \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Third_Party_Supplier/MapServer/1\",\r\n          title: \"POM Supplier\",\r\n          visible: false,\r\n          popupEnabled: true,\r\n          outFields: ['pomid', 'PomName', 'CompanyNam', 'PlaceName', 'Tankcap', 'Silocap']\r\n        });\r\n        // this.layerPom = importedLayer.layerPom\r\n\r\n        // GROUP DEFORESTATION\r\n        //\r\n        this.layerDeforestationPoint = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/0\",\r\n          title : \"Deforestation Point\",\r\n          visible : false,\r\n          popupEnabled: true,\r\n        });\r\n        map.add(this.layerDeforestationPoint)\r\n\r\n        this.layerDeforestationArea = new FeatureLayer({\r\n          url : \"https://idjktsvr10.wil.local/arcgis/rest/services/NewGISInteractiveMap/Deforestation/MapServer/1\",\r\n          title : \"Deforestation Area\",\r\n          visible : false\r\n        });\r\n\r\n        // Basemap WILMAR\r\n        //\r\n        var basemapWilmar = new VectorTileLayer({\r\n          url: 'https://gisportal.wilmar.co.id/arcgisserver/rest/services/Hosted/Wilmar_Basemap2/VectorTileServer?f=pjson'\r\n        });\r\n\r\n        // SKETCH LAYER\r\n        //\r\n        this.sketchLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        this.bufferLayer = new GraphicsLayer({\r\n          listMode : \"hide\"\r\n        })\r\n        map.addMany([this.sketchLayer, this.bufferLayer])\r\n\r\n        // LAYER GROUPING\r\n        //\r\n        var glIndustries = new GroupLayer({\r\n          title: \"Industries\"\r\n        });\r\n\r\n        var glPlantation = new GroupLayer({\r\n          title : \"Plantation\"\r\n        });\r\n\r\n        var glDeforestation = new GroupLayer({\r\n          title : \"Deforestation\"\r\n        })\r\n\r\n        glIndustries.addMany([ this.layerPkCrushing, this.layerRefinery, this.layerPom, ]);\r\n        glPlantation.addMany([ this.layerPlantationArea, this.layerPlantationPoint ])\r\n        glDeforestation.addMany([ this.layerDeforestationArea, this.layerDeforestationPoint,  ])\r\n        map.addMany([ glPlantation, glIndustries, glDeforestation]);\r\n\r\n        //=================================================================\r\n        // WIDGET\r\n        //=================================================================\r\n\r\n        // BASEMAP GALERY\r\n        //\r\n        var basemapGallery = new BasemapGallery({\r\n          view: this.view\r\n        });\r\n        var expand = new Expand({\r\n          view: this.view,\r\n          content: basemapGallery,\r\n          expandTooltip: 'Change Basemap'\r\n        });\r\n        this.view.ui.add(expand, \"top-right\");\r\n\r\n        // LAYERLIST\r\n        //\r\n        var layerList = new LayerList({\r\n          view: this.view,\r\n        })\r\n        var expandLayerList = new Expand({\r\n          view: this.view,\r\n          content: layerList,\r\n          expandTooltip: 'Layer List'\r\n        })\r\n        this.view.ui.add(expandLayerList, \"top-right\")\r\n\r\n        // LEGEND\r\n        //\r\n        var legend = new Legend({\r\n          view : this.view,\r\n        })\r\n        this.view.ui.add(legend, \"bottom-right\")\r\n\r\n        //=================================================================\r\n        //POPUP SET\r\n        //=================================================================\r\n        let pomPopupTemplate = {\r\n          title: 'POM Suplier',\r\n          content: (target) => generateContent(target, \"POM\")\r\n        }\r\n        this.layerPom.popupTemplate = pomPopupTemplate\r\n\r\n        let refineryPopupTemplate = {\r\n          title: 'Refinery',\r\n          content: (target) => generateContent(target, \"Refinery\")\r\n        }\r\n        this.layerRefinery.popupTemplate = refineryPopupTemplate\r\n\r\n        let dpPopupTemplate = {\r\n          title : 'Deforestation Point',\r\n          content : target => generateContent(target, \"Deforestation Point\")\r\n        }\r\n        this.layerDeforestationPoint.popupTemplate = dpPopupTemplate \r\n\r\n        //==================================================================\r\n        // EVENT\r\n        //==================================================================\r\n        watchUtils.whenTrue(this.view, \"stationary\", () => {\r\n          if(this.view.zoom >= 10){\r\n            console.log(this.view.zoom)\r\n            this.layerDeforestationArea.visible = this.layerDeforestationPoint.visible ? true : false \r\n          }\r\n          else{\r\n            this.layerDeforestationArea.visible = false\r\n          }\r\n        })\r\n\r\n      });\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    console.log(this.context)\r\n    // this.layerPlantationPoint.visible = true\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.view) {\r\n      this.view.container = null\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let dfrsContent\r\n    if(this.state.dfrsResult == null){\r\n      dfrsContent = <Result title=\"Please choose date range\" />\r\n    }\r\n    else if(this.state.dfrsResult.length == 0){\r\n      dfrsContent = <Empty />\r\n    } \r\n    else {\r\n      let content = []\r\n      this.state.dfrsResult.map( (features, index) => {\r\n        console.log(features)\r\n        content.push(<DfrsCard key={index} lat={features.attributes.POINT_X} lon={features.attributes.POINT_Y} startdate={features.attributes.start_date} enddate={features.attributes.end_date} peatland={features.attributes.peatland} mangrove={features.attributes.mangrove} other={features.attributes.other} total={features.attributes.total} index={index + 1}  />)\r\n      })\r\n        dfrsContent = <Space direction=\"vertical\">{content}</Space>\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"webmap\" ref={this.mapRef} />\r\n        <ButtonNotif onClick={ ()=>this.f_showDrawer(true) } count={4} />\r\n        <Drawer\r\n          title=\"Deforestation\"\r\n          placement=\"right\"\r\n          closable={true}\r\n          onClose={ () => this.f_showDrawer(false) }\r\n          visible={this.state.isDrawerShow}\r\n          width={500}\r\n        >\r\n          <DeforestationForm onFinish={this.f_dfrsFormOnFinish} />\r\n          <Divider />\r\n          <div style={{display : 'flex', flexDirection : 'column', justifyContent : 'space-between'}}>\r\n            {dfrsContent}\r\n          </div>\r\n        </Drawer>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapApp","import React from 'react';\nimport ButtonNotif from './Components/ButtonNotif';\nimport Sidebar from './Containers/Sidebar'\nimport MapApp from './Containers/MapApp'\nimport { ContextProvider } from './Context'\nimport { Layout } from 'antd';\nimport './App.css';\n\nconst { Content } = Layout\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sidebar />\n        <Layout className=\"site-layout\">\n          <Content style={{ margin: '0 0px' }}>\n            <div className=\"site-layout-background\" style={{ minHeight: '100vh' }}>\n              <MapApp />\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    </ContextProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}